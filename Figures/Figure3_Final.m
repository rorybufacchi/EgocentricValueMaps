% -----
% USE:
% 
% - Run this script to re-create:
% -- The elements used for making Figure 3 of the main paper
% -- The statistical results related to Figure 3
% -- THe elements for figure S 4 and corresponding stats
%
% - The data necessary for this figure is generated by CreateDataForPlots_Final.m,
% but a pre-computed version can also be loaded from:
% load('Results\ForFigures\$$$\$$$.mat') $
% -----


% First make sure the path is set right
cFileName       = matlab.desktop.editor.getActiveFilename;
codePath        = cFileName(1:end-24);
addpath(genpath(codePath));


% NOTE: Change this to the file path where you store the generated data,
% whether downloaded or generated by yourself
dataPath        = '';
if              isempty(dataPath)
     dataPath       = SetPathEgocentricMapsData();
end
cd(             dataPath);


%% LOAD DATA for Fig3, c
% NOTE: Load this if not computing the ANN outputs yourself
try
    load('Results\ForFigures\Fig3_model5_Processed_Precomputed.mat')
catch
    warning('No Precomputed data found. Either Compute results using CreateDataForPlots.m, or download precompted results from $')
end

%% Create figure and display STATS
%  NOTE: by changing 'plotConvs' and 'timeLagsToTest' below, you can
%  recreate figure S4

plotConvs         = 2; % NOTE: change this to [1:2] to also show the conversion to hit probability
timeLagsToTest    = 3; % NOTE: change this to e.g. [1:5] to plot prediction of hit probability at multiple timelags

fS.gridXstart = -4.5;
fS.gridXstep = 1;
fS.gridYstart = 3.5;
fS.gridYstep = 1;

Psii=[];

for iTL = 1:numel(timeLagsToTest) % time lag, only needed if approximating hit probability
    cTL = timeLagsToTest(iTL);

    % cAxes = [0 0.45 ; -4 4; -2 2];
    cAxes = [0 0.5 ; -2 2; -2 2];
    xAxes = [0 0.5 ; -.5 2; -2 .5];
    yAxes = [0 0.5 ; -.5 2; -2 .5];
    convN = {'HitProbability', 'ThreatValue'};
    maxCols = [.5 0 .5 ; 1 0 0 ; 0 0 1];
    xLims = [4.5 13.5];
    yLims = [3.5 13.5];

    for iM = 1

        % OPTION A: EITHER Use only PPS neurons
        QGl = permute(allNeurActGl(:,:,:,:,:,:,iM),[3 4 1 2 5 6]);
        for iL = 1:size(rMat.pDistN(:,:,3),1)
            inclN = rMat.pDistN(iL,:,iM) < .05;
            % QGl(:,:,:,:,iL,~inclN) = NaN;
        end
        QGl(:,:,:,:,1:end-floor(size(QGl,5)/2),:)=[]; % Remove early layers
        QGl = QGl(:,:,:,:,:);

        % % OPTN B: OR Use only action values (i.e. outputs)
        % QGl = QGl2(:,:,:,:,:,iM);

        % Remove Q goal values for which there are NaNs
        nanQ = squeeze(max(isnan(QGl),[],[1 2 3 4]));
        QGl(:,:,:,:,nanQ) = [];


        for iConversion = plotConvs

            f.(convN{iConversion}).f = figure('Position',[20 -20 800/3 1600]);

            clear Psii

            for iLimbCol=1:length(lmbColsToTest)

                cLR=1; cLC=lmbColsToTest(iLimbCol); cGlR=12; cGlC=5;
                Psi=squeeze(QGl(cLR,cLC,:,:,:));
                Psii(:,:,:,iLimbCol)=Psi;

                % Change data that is being predicted
                if iConversion == 2
                    hpmaTmpp=squeeze(QThr2(cLR,cLC,:,:,2,iM));
                    hpmaFl2(:,:,iLimbCol)=-hpmaTmpp;
                elseif iConversion == 3
                    hpmaTmpp=squeeze(QGl2(cLR,cLC,:,:,2,iM));
                    hpmaFl2(:,:,iLimbCol)=-hpmaTmpp;
                end

            end


            % Remove edge locations, so that non-useful numbers don't go into the
            % correlation
            hpmaFl2Tmp = hpmaFl2(1:12,2:end-1,:);
            PsiiTmp = Psii(1:12,2:end-1,:,:);
            if iConversion == 1
                hpmaFl2Tmp = hitProbMatAll(1:12,2:end-1,:,iTL);
                hpmaFl = hpmaFl2Tmp(:);
            elseif iConversion == 2 | iConversion == 3
                hpmaFl=hpmaFl2Tmp(:);
            end

            PsiiFl = permute(PsiiTmp,[3 1 2 4]); PsiiFl=PsiiFl(:,:);
            corrFacts = (PsiiFl'\hpmaFl);

            [rho p] = corr(hpmaFl,PsiiFl'*corrFacts);
            rhoAll(iConversion,iM,iTL) = rho;
            pAll(iConversion,iM,iTL)   = p;
            f.(convN{iConversion}).ax{3} = subplot(3,1,3);
            plot(hpmaFl,PsiiFl'*corrFacts,'.','MarkerEdgeColor',[.5 .5 .5]); hold on
            title([convN{iConversion} ' reconstruction. rho=' num2str(rho) '. p=' num2str(p)])
            if iConversion == 1
                xlabel(['real ' num2str(cTL +1) '-step hit probabilities'])
                ylabel(['reconstructed ' num2str(cTL +1) '-step ' convN{iConversion} 's']);
            elseif iConversion == 2 | iConversion == 3
                xlabel(['real ' convN{iConversion} 's'])
                ylabel(['reconstructed ' convN{iConversion} 's']);
            end
            xlim(xAxes(iConversion,:));
            ylim(yAxes(iConversion,:));
            xx = xlim;
            plot(xx,xx,'-.k')

            hitProbEstimate=squeeze(sum(Psii.*permute(corrFacts,[2 3 1]),3));

            f.(convN{iConversion}).ax{2} = subplot(3,1,2);
            tmpHC=8;
            imagesc(hitProbEstimate(:,:,tmpHC));
            GridOverImage(fS,f.(convN{iConversion}).ax{2});
            xlim(xLims);
            ylim(yLims);
            caxis(cAxes(iConversion,:))
            title([convN{iConversion} ' Reconstruction at limb col = ' num2str(tmpHC)])
            axis square; box off

            f.(convN{iConversion}).ax{1} = subplot(3,1,1);
            imagesc(hpmaFl2(:,:,tmpHC));
            GridOverImage(fS,f.(convN{iConversion}).ax{1});
            xlim(xLims);
            ylim(yLims);
            caxis(cAxes(iConversion,:))
            title(['Real ' convN{iConversion} ' at limb col = ' num2str(tmpHC)])
            axis square; box off

            if iConversion == 1
                colormap(whitetocol(100,maxCols(iConversion,:)));
            elseif iConversion == 2  | iConversion == 3
                colormap(redbluecmapRory(20,20))
            end

            tmpP = f.(convN{iConversion}).ax{1}.Position;

            f.(convN{iConversion}).ax{3} = axes('Position',[[ tmpP(1:2) + [tmpP(3).*0 tmpP(4).*1.1 ] ] [ tmpP(3:4).*[1 1.5]] ] ,'Box','off');
            f.(convN{iConversion}).ax{3}.Visible = 'off';
            f.(convN{iConversion}).cb = colorbar('south','Color','k');
            caxis([cAxes(iConversion,:)]);
            f.(convN{iConversion}).cb.Ticks = cAxes(iConversion,:);

        end
    end
end

disp([convN{iConversion} ' reconstruction. rho=' num2str(rho) '. p=' num2str(p)])

%% Save figures

allFields = fields(f);
for iF = 1:length(allFields)
    cF = allFields{iF};
    
    set(f.(cF).f, 'Renderer', 'painters'); % default, opengl
    saveas(f.(cF).f,['Results\Outputs\Figure3_' cF '.png'] , 'png')
    saveas(f.(cF).f,['Results\Outputs\Figure3_' cF '.eps'] , 'epsc')
    saveas(f.(cF).f,['Results\Outputs\Figure3_' cF '.pdf'] , 'pdf')
end
