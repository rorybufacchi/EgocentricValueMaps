% -----
% USE:
% 
% Run this script to re-create the elements used for making figure 1 of the
% main paper
% -----


% First make sure the path is set right
cFileName       = matlab.desktop.editor.getActiveFilename;
codePath        = cFileName(1:end-24);
addpath(        genpath(codePath));


% NOTE: Change this to the file path where you store the generated data,
% whether downloaded or generated by yourself
dataPath                    = 'C:\Users\Rory Bufacchi\Documents\Projects\DefenseAgent'; '';
if                          isempty(dataPath)
     dataPath                   = SetPathEgocentricMapsData();
end
cd(                         dataPath);


%% Elements used for Fig 1c-g

% -------------------------------------------------------------------------
% First run a quick dummy agent to get the world-structure 'w' 
% (Needed for plotting later)
s.rp.maxActions                 = 10; 
s.wrld.size                     = [14 15];
s                               = DefaultSettings(s);
[~, w]                          = RunRLfun(s);
s                               = DefaultSettings(s);

% Make 3 plots, 
% - one with gamma = 0.3 and 0.7, showing the value of staying still action
% - one with gamma = 0.3 and 1.0, showing the value of staying still action
% - one with gamma = 0.3 and 0.7, showing the AVERAGE action value across staying still, moving left, and moving right
allGammas                       = [0.3 0.7 ; 0.3 1; 0.3 0.7];


% -------------------------------------------------------------------------

% Data fitting variables
s.clc.startRew                  = -1;
s.clc.RewardBehindSurfaceFl     = 0;
s.clc.checkCollisionFl          = 0;
s.clc.startSR                   = 12;
s.clc.startSC                   = 8;
s.clc.startSZ                   = 1;
s.clc.nearPos                   = [s.wrld.size(1)-0 8 1]';
s.clc.nReps                     = 1;
s.clc.stepUpdateFl              = 0; % Whether to update in timesteps - especially important for hitprob and multisens integration
s.clc.nSteps                    = 1;
s.clc.baseVel                   = [1 0 0];

s.clc.rewardInterceptFl = 0;
s.clc.thinLimbsFl = 1;
s.lp.alg = 'Q';

% Random stimulus dynamics
rSpr                            = 0;
rSprPr                          = 1;
cSpr                            = 0;
cSprPr                          = 1;
zSpr                            = 0; %%% zSpr = [ -1 0 1 ];
zSprPr                          = 1;
% x y z, Deterministic stimulus dynamics
s.clc.stimDynams =     @(pos) pos + s.clc.baseVel; % For approaching, set speed positive
s.clc.randSpread =     {rSpr cSpr zSpr}; % Put a little bit of x and z variability in? Kind of arbitrary
s.clc.spreadProb =     {rSprPr cSprPr  zSprPr}; % x y z, probabilities of spread
% Random sensory uncertainties
s.clc.sensSpread                = {[0] , [0] , [0]};
s.clc.sensProb                  = {[1] , [1] , [1]};
s.clc.actConsequence            = [0  0  0 ];     % action 3 right
s.wrld.size                     = [14 15 1];
% -------------------------------------------------------------------------



for iFig    = 1:3

% settings for plot
sFP                     = s;
sFP.plt.lmbRow          = s.wrld.size(1)-2;
sFP.plt.rowLims         = [6.5 s.wrld.size(1)-1.5];
sFP.plt.colLims         = [3.5 s.wrld.size(2)-3.5];
sFP.plt.cBarFl          = 0;
sFP.plt.meanLimbCols    = 1;
sFP                     = DefaultSettings(sFP);
sFP.plt.axesVis         = 0;
s.plt.colorLims                 = [0 0.7];

% figure settings
fS.w                    = 32; % Width (cm)
fS.h                    = 15; % Height
fS.x                    = 5; % x screen position
fS.y                    = 5; % y screen position
fS.fillW                = .99; % fraction of width that's going to be filled
fS.fillH                = .99; % fraction of height that's going to be filled
fS.sub.w                = [0.09 0.18 0.18 0.18 0.18]; % fraction of space that each subplot takes (width)
fS.sub.h                = [0.07 0.35 0.35]; % fraction of space that each subplot takes (height)
fS.gridXstart           = -4.5;
fS.gridXstep            = 1;
fS.gridYstart           = 3.5;
fS.gridYstep            = 1;

nWpl                    = length(fS.sub.w); % number of plots in width
nHpl                    = length(fS.sub.h); % number of plots in height
wSpace                  = (fS.fillW-sum(fS.sub.w))./(nWpl-1) ; % fraction of space between subplots (width)
hSpace                  = (fS.fillH-sum(fS.sub.h))./(nHpl-1) ; % space between subplots (height)

%subplot positions
spX                     = MakeSubplotPos(fS.fillW, fS.sub.w, wSpace);
spY                     = flip(MakeSubplotPos(fS.fillH, flip(fS.sub.h), hSpace));

fig{iFig}               = figure('Units', 'centimeters', 'Position', [fS.x fS.y fS.w fS.h ]);

%  ------------------------------------------------------------------------
% Top 4 plots
spl                     = subplot(40,1000,1);
set(                    spl, 'Position', [spX(2) spY(2) fS.sub.w(2)+wSpace/4 fS.sub.h(2) ]);
sFP.plt.plAct           = 1;
sFP.plt.lmbCol          = 8;
s.clc.gammaVal          = allGammas(iFig,1);
s.clc.randSpread        = {0 0 0};
s.clc.spreadProb        = {1 1 1};
s.clc.actConsequence    = [0 0 0];
newQ                    = CalcQDirect(s);
newQ                    = repmat(permute(newQ,[4 5 2 3 1]),[14 15 1 1]);
DisplActValsFun(        sFP,w, sign(s.clc.startRew) .* newQ); hold on
GridOverImage(          fS,spl);

spl                     = subplot(40,1000,1);
set(                    spl, 'Position', [spX(3)-wSpace/4 spY(2) fS.sub.w(3)+wSpace/4 fS.sub.h(2) ]);
s.clc.gammaVal          = allGammas(iFig,2);
newQ                    = CalcQDirect(s);
newQ                    = repmat(permute(newQ,[4 5 2 3 1]),[14 15 1 1]);
DisplActValsFun(        sFP,w, sign(s.clc.startRew) .* newQ); hold on
GridOverImage(          fS,spl);

spl                     = subplot(40,1000,1);
set(                    spl, 'Position', [spX(4) spY(2) fS.sub.w(4)+wSpace/4 fS.sub.h(2) ]);
s.clc.gammaVal          = allGammas(iFig,1);
s.clc.actConsequence    = [0  0  0 ; ... % action 1 stay
                           0  1  0 ; ... % action 2 left
                           0 -1  0];     % action 3 right
newQ                    = CalcQDirect(s);
newQ                    = repmat(permute(newQ,[4 5 2 3 1]),[14 15 1 1]);
% Create average value across actions
if iFig                 == 3
    newQ                    = nanmean(newQ,5);
end
DisplActValsFun(        sFP,w, sign(s.clc.startRew) .* newQ); hold on
GridOverImage(          fS,spl);

spl                     = subplot(40,1000,1);
set(                    spl, 'Position', [spX(5)-wSpace/4 spY(2) fS.sub.w(5)+wSpace/4 fS.sub.h(2) ]);

s.clc.gammaVal          = allGammas(iFig,2);
newQ                    = CalcQDirect(s);
newQ                    = repmat(permute(newQ,[4 5 2 3 1]),[14 15 1 1]);
% Create average value across actions
if iFig                 == 3
    newQ                    = nanmean(newQ,5);
end
DisplActValsFun(        sFP,w, sign(s.clc.startRew) .* newQ); hold on
GridOverImage(          fS,spl);

%  ------------------------------------------------------------------------
% Bottom 4 plots
spl                     = subplot(40,1000,1)
set(                    spl, 'Position', [spX(2) spY(3) fS.sub.w(2)+wSpace/4 fS.sub.h(3) ]);
s.clc.gammaVal          = allGammas(iFig,1);
s.clc.randSpread        =     {0,     [-1 0 1] , 0};
s.clc.spreadProb        =     {1, 1 ./[ 3 3 3] ,  1};
s.clc.actConsequence    = [0 0 0];
newQ                    = CalcQDirect(s);
newQ                    = repmat(permute(newQ,[4 5 2 3 1]),[14 15 1 1]);
DisplActValsFun(        sFP,w, sign(s.clc.startRew) .* newQ); hold on
GridOverImage(          fS,spl);

spl                     = subplot(40,1000,1);
set(                    spl, 'Position', [spX(3)-wSpace/4 spY(3) fS.sub.w(3)+wSpace/4 fS.sub.h(2) ]);
s.clc.gammaVal          = allGammas(iFig,2);
newQ                    = CalcQDirect(s);
newQ                    = repmat(permute(newQ,[4 5 2 3 1]),[14 15 1 1]);
DisplActValsFun(        sFP,w, sign(s.clc.startRew) .* newQ); hold on
GridOverImage(          fS,spl);

spl                     = subplot(40,1000,1);
set(                    spl, 'Position', [spX(4) spY(3) fS.sub.w(4)+wSpace/4 fS.sub.h(2) ]);
s.clc.gammaVal          = allGammas(iFig,1);
s.clc.actConsequence    = [0  0  0 ; ... % action 1 stay
                           0  1  0 ; ... % action 2 left
                           0 -1  0];     % action 3 right 
newQ                    = CalcQDirect(s);
newQ                    = repmat(permute(newQ,[4 5 2 3 1]),[14 15 1 1]);
% Create average value across actions
if iFig                 == 3
    newQ                    = nanmean(newQ,5);
end
DisplActValsFun(        sFP,w, sign(s.clc.startRew) .* newQ); hold on
GridOverImage(          fS,spl);

spl                     = subplot(40,1000,1);
set(                    spl, 'Position', [spX(5)-wSpace/4 spY(3) fS.sub.w(5)+wSpace/4 fS.sub.h(2) ]);
s.clc.gammaVal          = allGammas(iFig,2);
s.clc.actConsequence    = [0  0  0 ; ... % action 1 stay
                           0  1  0 ; ... % action 2 left
                           0 -1  0];     % action 3 right
newQ                    = CalcQDirect(s);
newQ                    = repmat(permute(newQ,[4 5 2 3 1]),[14 15 1 1]);
% Create average value across actions
if iFig                 == 3
    newQ                    = nanmean(newQ,5);
end
DisplActValsFun(        sFP,w, sign(s.clc.startRew) .* newQ); hold on
GridOverImage(          fS,spl);

%  ------------------------------------------------------------------------
% Add gamma labels
glPosx  = [3 2 5 4 3 2 5 4]; % gamma label x-positions
wST     = (wSpace/4) .*[-1 0 -1 0 -1 0 -1 0]; % width shift temp
glPosy  = [2 2 2 2 3 3 3 3]; % gamma label y-positions
for iGP = 1: length(glPosx)% gamma position
    
    gm      = allGammas(iFig,mod(iGP,2)+1); 
    tmpH    = (nHpl-2)./(nHpl-1); % extra space needed for the label

    spl     = subplot(40,1000,1);
    set(      spl, 'Position', [spX(glPosx(iGP))+wST(iGP) spY(glPosy(iGP))+fS.sub.h(glPosy(iGP))+hSpace.*.14 fS.sub.w(glPosx(iGP))+wSpace/4 fS.sub.h(1)/2 ]);
    fill(     [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none');
    set(      gca,'visible','off');
    FNT     = {'HorizontalAlignment', 'center', ...
               'FontSize', 14, 'Color', 1.*[1 1 1], };
    txt     = text(spl,0, 0, ['\gamma = ' num2str(gm)],'VerticalAlignment', 'middle',  FNT{:});
end

%  ------------------------------------------------------------------------
% Action group 1 label
% extra space needed for the label
spl     = subplot(40,1000,1);
set(    spl, 'Position', [spX(2) spY(1)-hSpace/3 fS.sub.w(2)+fS.sub.w(3)+wSpace fS.sub.h(1)+hSpace/3 ]);
fill(   [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(    gca,'visible','off')
FNT     = {'HorizontalAlignment', 'left', ...
           'FontSize', 14, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt     = text(spl,-.9, 0, 'Stay','VerticalAlignment', 'middle',  FNT{:});


%  ------------------------------------------------------------------------
% Action group 2 label
spl     = subplot(40,1000,1);
set(    spl, 'Position', [spX(4) spY(1)-hSpace/3 fS.sub.w(3)+fS.sub.w(4)+wSpace fS.sub.h(1)+hSpace/3 ]);
fill(   [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(    gca,'visible','off')
FNT     = {'HorizontalAlignment', 'left', ...
           'FontSize', 14, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt     = text(spl,-.9, 0, 'Left, Stay, Right','VerticalAlignment', 'middle',  FNT{:});

%  ------------------------------------------------------------------------
% Dynamics group 1 label
spl     = subplot(40,1000,1);
set(    spl, 'Position', [spX(1) spY(2) fS.sub.w(1)/3 fS.sub.h(2) ]);
fill(   [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(    gca,'visible','off')
FNT     = {'Rotation', 90, ...
           'HorizontalAlignment', 'center', ...
           'FontSize', 14, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt     = text(spl,0, 0, 'Deterministic','VerticalAlignment', 'middle',  FNT{:});

%  ------------------------------------------------------------------------
% Dynamics group 2 label
spl     = subplot(40,1000,1);
set(    spl, 'Position', [spX(1) spY(3) fS.sub.w(1)/3 fS.sub.h(3) ]);
fill(   [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(    gca,'visible','off')
FNT     = {'Rotation', 90, ...
           'HorizontalAlignment', 'center', ...
           'FontSize', 14, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt     = text(spl,0, 0, 'Probabilistic','VerticalAlignment', 'middle',  FNT{:});


%  ------------------------------------------------------------------------
% Rewards label
spl     = subplot(40,1000,1);
set(    spl, 'Position', [spX(1) spY(1)+(fS.sub.h(1)*(1/3))  fS.sub.w(1)+(wSpace*(3/4)) fS.sub.h(1)*(2/3) ]);
fill(   [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(    gca,'visible','off')
FNT     = {'HorizontalAlignment', 'center', ...
           'FontSize', 12, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt     = text(spl,0, 0, 'Rewards','VerticalAlignment', 'middle',  FNT{:});

if sign(s.clc.startRew) > 0
    colormap(whitetocol(100,[ 0   0   0.7 ]))
else
    colormap(whitetocol(100,[ 0.7 0   0   ]))
end

end

%% Elements used for Fig 1b
% (Line plots)

iFig        = 4;
fig{iFig}   = figure('Units', 'centimeters', 'Position', [5 5 20 4 ]);


qMults      = [1./3 2./3 1];
discFacts   = [0.3 0.7];

clear       qForLine
for iDiscFact = 1:numel(discFacts)
    s.clc.gammaVal          = discFacts(iDiscFact);
    s.clc.randSpread        = {0 0 0};
    s.clc.spreadProb        = {1 1 1};
    s.clc.actConsequence    = [0 0 0];
    newQ                    = CalcQDirect(s);
    qForLine(:,iDiscFact,:) = repmat( newQ(1,3:11,8) , [1 1 numel(qMults)]) .* permute(qMults,[1 3 2]) ;
end

for iQMult = 1:numel(qMults)
    subplot(1, numel(qMults), iQMult);
    plot(   9:-1:1, qForLine(:,:,iQMult),'-o'); hold on

    bar(    flipud(qForLine(:,:,iQMult)));

    ylim(   [-1.1 0]);
    xlim(   [0.5 5.5]);
end

%% Save figures


for iF = 1:length(fig)
    set(    fig{iF}, 'Renderer', 'painters'); % default, opengl
    saveas( fig{iF},['Results\Outputs\Figure1_BasePlots_DirectCalc' num2str(iF) '_startRew' num2str(s.clc.startRew) '.png'] , 'png')
    saveas( fig{iF},['Results\Outputs\Figure1_BasePlots_DirectCalc' num2str(iF) '_startRew' num2str(s.clc.startRew) '.eps'] , 'epsc')
    saveas( fig{iF},['Results\Outputs\Figure1_BasePlots_DirectCalc' num2str(iF) '_startRew' num2str(s.clc.startRew) '.pdf'] , 'pdf')
end

%% FUNCTIONS

function plotPos = MakeSubplotPos(fillSize, subSize, subSpace)
plotPos     = (1-fillSize)./2;
for iX      = 2:length(subSize)
    plotPos     = [plotPos plotPos(end)+subSize(iX-1) + subSpace] ;
end
end

    

