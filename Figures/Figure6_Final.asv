% -----
% USE:
% 
% - Run this script to re-create:
% -- The elements used for making Figure 6 of the main paper
%
% - The data necessary for this figure is generated by $ CreateModelDataToFit_Final.m,
% but a pre-computed version can also be loaded from:
% load('Results\ForFigures\$$$\$$$.mat') $
% -----


% First make sure the path is set right though
cFileName       = matlab.desktop.editor.getActiveFilename;
codePath        = cFileName(1:end-23);
addpath(        genpath(codePath));
cd(             codePath);

% NOTE: Change this to the file path where you store the generated data,
% whether downloaded or generated by yourself
dataPath                    = ''; % 'C:\Users\Rory Bufacchi\Documents\Projects\DefenseAgent'; 
if              isempty(dataPath)
     dataPath       = SetPathEgocentricMapsData();
end



%% ------------------------------------------------------------------------
%  LOAD fitted data for Fig6
try
    load('Results\ForFigures\Fig6_7_ModelledData_Precomputed.mat');
    load('Results\ForFigures\Fig6_7_FittedData_Precomputed.mat');
catch
    warning('No Precomputed data found. Either Compute results using CreateModelDataToFit_Final.m, or download precompted results from $')
end




%% Fig 6a- Showing body part surfaces
%  OPTIONAL by setting vidfl ==1,make a video of the rotating surfaces
s.plt.vidFl = 0;

f.Model3DBase.f = figure('Position',[20 20 1400 1200]);

lims3D   = [105 365 ; -20 120 ; 0 150];
sizePlot = [0 300 0 130 0 150];

% ------------------------------------------------------
% First skin for all body parts

% HAND
sFPl = sHndSide ;
plQ = allQ(13,:);
sFPl.clc.startRew       = 1;
sFPl.clc.plS.iAct       = 1:43;
sFPl.clc.plS.ActFun     = @(x) max(x,[],1);
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 2; % somewhat arbitrary offset to get around how voxelsurf.m deals with negative numbers
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < 0.3;
sFPl.clc.plS.plSkin     = 'Y';
sFPl.clc.plS.plField    = 'N'; %
sFPl.clc.plS.volSettings= {true,sizePlot,1};

[newQ, f] = PlotQMaps(sFPl,plQ,f); hold on
ylim(lims3D(1,:));
xlim(lims3D(2,:));
zlim(lims3D(3,:));
caxis([1 4]);


% BODY
sFPl = sBdy;
plQ = allQ(2,:);
sFPl.clc.startRew       = -1;
sFPl.clc.plS.iAct       = 1:7;
sFPl.clc.plS.ActFun     = @(x) max(x,[],1);
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 3; 
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < 0.3;
sFPl.clc.plS.plSkin     = 'Y';
sFPl.clc.plS.plField    = 'N';
sFPl.clc.plS.volSettings= {true,sizePlot,1};

[newQ, f] = PlotQMaps(sFPl,plQ,f);
caxis([1 4]);

% HEAD
sFPl = sHed;
plQ = allQ(6,:);
sFPl.clc.startRew       = -1;
sFPl.clc.plS.iAct       = 1:7;
sFPl.clc.plS.ActFun     = @(x) max(x,[],1);
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 3; 
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < 0.3;
sFPl.clc.plS.plSkin     = 'Y';
sFPl.clc.plS.plField    = 'N';
sFPl.clc.plS.volSettings= {true,sizePlot,1};

[newQ, f] = PlotQMaps(sFPl,plQ,f);
caxis([1 4]);

view([30 25])
axis off

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if s.plt.vidFl == 1
    % Video without fields
    s.plt.vidFileName = 'Results\Videos\RotateWithWIthoutFields.avi';
    s.plt.vidFR = 36;
    s.plt.addVidAngs = linspace(0,360 .* 1.5,s.plt.vidFR * 6)
    v = RotateAndFilm(gcf,s,[]);
end
title('Body Surface')

% ------------------------------------------------------
% Next FIELDS for all body parts

% Make copy of figure
cAx = gca;
f.Model3DFields.f = figure('Position',[20 20 1400 1200]);
cAx = copyobj(cAx,f.Model3DFields.f);

title('')
% BODY
sFPl = sBdy;
plQ = allQ(2,:);
sFPl.clc.startRew       = -1;
sFPl.clc.plS.iAct       = 1:7;
sFPl.clc.plS.ActFun     = @(x) x(1,:,:,:,:); % Just use one action
% sFPl.clc.plS.ActFun     = @(x) max(x,[],1); % Alternative: show max value
% sFPl.clc.plS.ActFun     = @(x) median(x,1); % Alternative: show median value
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 3; 
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < 0.3;
sFPl.clc.plS.plSkin     = 'N';
sFPl.clc.plS.plField    = 'Y';
sFPl.clc.plS.volSettings= {true,sizePlot,.25};

[newQ, f] = PlotQMaps(sFPl,plQ,f);
ylim(lims3D(1,:));
xlim(lims3D(2,:));
zlim(lims3D(3,:));


% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if s.plt.vidFl == 1
    % Video with body field
    s.plt.addVidAngs = linspace(0,360 .* 1,s.plt.vidFR * 4)
    v = RotateAndFilm(gcf,s,v);
end



% HEAD
sFPl = sHed;
plQ = allQ(6,:);
sFPl.clc.startRew       = -1;
sFPl.clc.plS.iAct       = 1:7;
sFPl.clc.plS.ActFun     = @(x) x(1,:,:,:,:);
% sFPl.clc.plS.ActFun     = @(x) max(x,[],1);
% sFPl.clc.plS.ActFun     = @(x) median(x,1);
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 3; 
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < 0.3;
sFPl.clc.plS.plSkin     = 'N';
sFPl.clc.plS.plField    = 'Y';
sFPl.clc.plS.volSettings= {true,sizePlot,.25};

[newQ, f] = PlotQMaps(sFPl,plQ,f);
ylim(lims3D(1,:));
xlim(lims3D(2,:));
zlim(lims3D(3,:));

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if s.plt.vidFl == 1
    s.plt.addVidAngs = linspace(0,360 .* 1,s.plt.vidFR * 4)
    v = RotateAndFilm(gcf,s,v);
end


% HAND
sFPl = sHndSide ;
plQ = allQ(13,:);
sFPl.clc.startRew       = 1;
sFPl.clc.plS.iAct       = 1:43;
sFPl.clc.plS.ActFun     = @(x) x(1,:,:,:,:);
% sFPl.clc.plS.ActFun     = @(x) max(x,[],1);
% sFPl.clc.plS.ActFun     = @(x) median(x,1);
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 2; 
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < 0.45
sFPl.clc.plS.plSkin     = 'N';
sFPl.clc.plS.plField    = 'Y'; %
sFPl.clc.plS.volSettings= {true,sizePlot,.25};

[newQ, f] = PlotQMaps(sFPl,plQ,f); hold on
caxis([1 4])
colormap(BlueWhiteRedDavide3)
ylim(lims3D(1,:));
xlim(lims3D(2,:));
zlim(lims3D(3,:));

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if s.plt.vidFl == 1
    s.plt.addVidAngs = linspace(0,360 .* 2.5 ,s.plt.vidFR * 10)
    v = RotateAndFilm(gcf,s,v);
    close(v)
end

title('Trunk + Head + Hand PPS')


%% Fig 6b,c - Showing Q-values and egocentric map 


% ------------------------------------------------------------------------
% Plot values for individual actions and body parts

sizePlot = [0 300 0 130 0 150];

s.plt.lims3D   = [60 280 ; 20 120 ; 20 140];
s.plt.sizePlot = [0 300 0 130 0 150]; % [0.1 0.8 0.1 0.8 0.1 0.8]
s.plt.bodyCol  = -1e-6;

s.plt.vidFl   = 0;
s.plt.QrelMax = 1;
s.plt.VisAx   = 0;

actNames    = {'Stay','Up','Down','Left','Right','Forward','Back'};
actCriteria = {@(x) sum(x==0,2)==3, ... STAY
               @(x) x(:,3) > 0, ...     UP
               @(x) x(:,3) < 0, ...     DOWN
               @(x) x(:,2) > 0, ...     LEFT
               @(x) x(:,2) < 0, ...     RIGHT
               @(x) x(:,1) < 0, ...     FORWARD
               @(x) x(:,1) > 0}; %      BACK

taskNames = {'Goal','Threat'};
taskDefs  = [1, -1];

bdyPartNames = {'Trunk','Head','Hand'};
bdyPartTags  = {'sBdy', 'sHed','sHnd'}'

qsToPlot = [ 1  2; ... Body goal threat (towards)
             5  6; ... Head goal threat (towards)
            13 14];  % Hand goal threat (towards)


% ------------------------------------------------------
% First skin for all body parts

f.Model3DBase.f = figure('Position',[20 20 1400 1200]);

[sFPl, f] = PlotBaseBody(f, s, sHndSide, sBdy, sHed, allQ);

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if s.plt.vidFl == 1
    % Video without fields
    s.plt.vidFileName = '\Results\Videos\RotateWithFields.avi';
    s.plt.vidFR = 36;
    s.plt.addVidAngs = linspace(0,360 .* 1.5,s.plt.vidFR * 6)

    v = RotateAndFilm(gcf,s,[]);
end

% Store axes to Make copy of figure
cAx = gca;
for iBP = 1:length(bdyPartNames)

    % Select body part
    eval(['sFPl = ' bdyPartTags{iBP} ';']);

    if s.plt.QrelMax == 1
        currFigName = ['Model3DForTheory_' actNames{1} 'BodyPart_' bdyPartNames{iBP}];
        f.(currFigName).f = figure('Position',[20 20 300 1800]);
    end

    for iTask = 1:length(taskDefs)

        % Select data for body part and task
        plQ = allQ(qsToPlot(iBP,iTask),:);

        if s.plt.QrelMax == 1;
            % Plot only positive value relative to other actions
            plQ = CalcRelativeQVal(sFPl, plQ, actNames, actCriteria);
        end

        for iAct = 1:length(actNames)

            % ------------------------------------------------------
            % Next FIELDS for all body parts

            if s.plt.QrelMax == 10
            else
                % % % currFigName = ['Model3DForTheory_' actNames{iAct} 'BodyPart_' bdyPartNames{iBP}];
                if s.plt.VisAx == 1
                    currFigName = ['Model3DTask' num2str(iTask) '' actNames{iAct} 'BodyPart' bdyPartNames{iBP} 'PlotRelmax' num2str(s.plt.QrelMax)];
                else
                    currFigName = ['NoAxModel3DTask' num2str(iTask) '' actNames{iAct} 'BodyPart' bdyPartNames{iBP} 'PlotRelmax' num2str(s.plt.QrelMax)];
                end

                f.(currFigName).f = figure('Position',[20 20 600 600]);
            end

            if s.plt.QrelMax == 10
                axS.xOffset = 0.00;
                axS.yOffset = 0.05;

                newAx = axes('Position',[axS.xOffset + (iTask-1) .* ((1 - 2.*axS.xOffset) ./ length(taskDefs)) , ...
                    axS.yOffset + (iAct-1) .* ((1 - 2.*axS.yOffset) ./ length(actNames)), ...
                    ((1 - 2.*axS.xOffset) ./ length(taskDefs)), ...
                    ((1 - 2.*axS.yOffset) ./ length(actNames))]);


                PlotBaseBody(f, s, sHndSide, sBdy, sHed, allQ); hold on
            else
                copyobj(cAx,f.(currFigName).f);
            end


            sFPl.clc.plS.iAct       = actCriteria{iAct}(sFPl.clc.actConsequence);
            sFPl.clc.plS.ActFun     = @(x) max(abs(x),[],1);
            sFPl.clc.plS.plDim      = 3;
            sFPl.clc.plS.offset     = 0;
            if s.plt.QrelMax == 1
                tmpD = plQ.qVals{1}(sFPl.clc.plS.iAct,:,:,:);
                sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < max(tmpD(:)) ./ 5;
            else
                sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < 0.3;
            end
            sFPl.clc.plS.plSkin     = 'N';
            sFPl.clc.plS.plField    = 'Y';


            if s.plt.QrelMax == 1
                sFPl.clc.plS.volSettings= {true,sizePlot,.25};
            else
                sFPl.clc.plS.volSettings= {true,sizePlot,.075};
            end

            sFPl.clc.startRew   = taskDefs(iTask);
            [newQ, f]           = PlotQMaps(sFPl,plQ,f);

            % Colour limits
            if s.plt.QrelMax == 0
                caxis([0.11 sFPl.clc.gammaVal.^2])
            else
                caxis auto
                curCaxis = caxis;
                % Set a very low minimal colour differential
                curCaxis = [curCaxis, 1e-5];
                caxis([0 max(curCaxis).*0.75 ]);
            end

            ylim(s.plt.lims3D(1,:));
            xlim(s.plt.lims3D(2,:));
            zlim(s.plt.lims3D(3,:));
            hold on

            % ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            if s.plt.vidFl == 1
                % Video with body field
                s.plt.addVidAngs = linspace(0,360 .* 1,s.plt.vidFR * 4)
                v = RotateAndFilm(gcf,s,v);
            end

            % Adapt colourmap to task
            if s.plt.QrelMax == 0
                if iTask == 1
                    colormap(coltocol(100,[0.3 0.3 0.3],[0 0 0.7]));
                else
                    colormap(coltocol(100,[0.3 0.3 0.3],[0.7 0 0]));
                end
            else
                if iTask == 1
                    colormap(gca,[[0.3 0.3 0.3] ; whitetocol(100,[0 0 0.7])]);
                else
                    colormap(gca,[[0.3 0.3 0.3] ; whitetocol(100,[0.7 0 0])]);
                end
            end

            if s.plt.VisAx == 1
                axis on
            else
                axis off
            end
            xticklabels([]);
            yticklabels([]);
            zticklabels([]);
        end
    end
end

% ------------------------------------------------------------------------
%  Plot the weighted sum 

f.WeightedAvForFitting.f = figure('Position',[20 20 600 600]);
copyobj(cAx,f.WeightedAvForFitting.f); hold on

for iBP = 1:length(bdyPartNames)

% Select body part
eval(['sFPl = ' bdyPartTags{iBP} ';']);

for iTask = 1:length(taskDefs)

% Select data for body part and task
plQtmp = allQ(qsToPlot(iBP,iTask),:);
if iTask == 1 & iBP == 1;
    plQ = plQtmp;
else
    plQ.qVals{1} = sum( [ max(abs(plQ.qVals{1}),[],1) ; max(abs(plQtmp.qVals{1}),[],1) ], 1);
end

end
end

sFPl.clc.plS.iAct       = 1;
sFPl.clc.plS.ActFun     = @(x) max(abs(x),[],1);
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 0; 
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < 0.4;
sFPl.clc.plS.plSkin     = 'N';
sFPl.clc.plS.plField    = 'Y';

sFPl.clc.plS.volSettings= {true,sizePlot,.075};

sFPl.clc.startRew   = taskDefs(iTask);
[newQ, f]           = PlotQMaps(sFPl,plQ,f);
caxis([0.1 sFPl.clc.gammaVal])

ylim(s.plt.lims3D(1,:));
xlim(s.plt.lims3D(2,:));
zlim(s.plt.lims3D(3,:));

view([-28 22.5])
colormap(coltocol(100,[0.3 0.3 0.3],[0 0.5 0]))


%% Save figures


allFields = fields(f);
for iF = 1:length(allFields)
    cF = allFields{iF};

    set(f.(cF).f, 'Renderer', 'painters'); % default, opengl

    saveas(f.(cF).f,['Results\Outputs\Figure6_ModelEmpirical\' cF '.eps'] , 'epsc')
    saveas(f.(cF).f,['Results\ForFigures\ModelEmpirical\' cF '.pdf'] , 'pdf')

end

%% FUNCTIONS


% -------------------------------------------------------------------------
function [v] = RotateAndFilm(h,s,v)
% Rotates and films a 3d plot, given by handle
    
    if isempty(v)
        v = VideoWriter(s.plt.vidFileName);
        v.FrameRate=s.plt.vidFR;
        v.Quality = 100;
        open(v)
    end
    
    [baseAz baseEl] = view;

    axis vis3d

    for iAng = 1:numel(s.plt.addVidAngs)

        view([baseAz + s.plt.addVidAngs(iAng), baseEl])

        frame=getframe(h);

        writeVideo(v,frame);
    end

end

% -------------------------------------------------------------------------
function [allQ, f] = PlotQMaps(s,allQ,f)
% Plots q values. Best not to feed the entirety of allQ at the same time,
% but rather specific rows
iAct = s.clc.plS.iAct;

for iQ = 1:size(allQ,1)
    cQ = allQ(iQ,:);
    plQ = s.clc.plS.ActFun(cQ.qVals{1}(iAct,:,:,:));

    % Switch between 1D, 2D and 3D plots
    switch s.clc.plS.plDim
        case 1
            plot(squeeze(-plQ(:,:,s.clc.nearPos(2),s.clc.nearPos(3)))' )

        case 2
            % 2D figure settings
            fS.gridXstart = -4.5;
            fS.gridXstep = 1;
            fS.gridYstart = 3.5;
            fS.gridYstep = 1;

            ax{1}    = axes('Position',[.05 .1 .4 .8]);
            imagesc(squeeze(-plQ(1,:,:,s.clc.nearPos(3))) );
            % colormap(whitetocol(100,[0 0 0.7]))
            colormap(redbluecmapRory)
            GridOverImage(fS,ax{1});
            caxis([-1 1])
            colorbar

            ax{2}    = axes('Position',[.55 .1 .4 .8]);
            imagesc(squeeze(-plQ(1,:,s.clc.nearPos(2),:))' );
            hold on; axis xy
            % colormap(whitetocol(100,[0 0 0.7]))
            colormap(redbluecmapRory)
            GridOverImage(fS,ax{2});
            caxis([-1 1])

        case 3
            %  3D plot
            switch s.clc.plS.plField
                case 'Y'
                    tmpQ = plQ;
                case 'N'
                    tmpQ = zeros(size(plQ));
            end

            switch s.clc.plS.plSkin
                case 'Y'
                    % Set the the 'skin surface' to a particular value
                    % [hence the startSR:end in the 2nd dimension]
                    for iVol = 1:length(s.clc.startSZ)
                        tmpQ(:,s.clc.startSR(iVol),s.clc.startSC(iVol),s.clc.startSZ(iVol)) = -s.clc.startRew;
                    end

                    if isfield(s.clc,'toolSR')
                        for iVol = 1:length(s.clc.toolSR)
                            newQ(:,s.clc.toolSR(iVol),s.clc.toolSC(iVol),s.clc.toolSZ(iVol)) = -s.clc.startRew;
                        end
                    end
            end

            % Have to set tmpQ to all positive, becasue voxelsurf is weird
            % with negative numbers
            tmpQ = tmpQ + s.clc.plS.offset;
            
            % Make the excluded points invisible
            tmpQ( s.clc.plS.excl3D(tmpQ) ) = 0;
            voxelSurf(squeeze(tmpQ(1,:,:,:)),s.clc.plS.volSettings{:});
    end
end
end
% -------------------------------------------------------------------------


% -------------------------------------------------------------------------
function [plQ] = CalcRelativeQVal(sFPl, plQ, actNames, actCriteria)
% Calculates the diffference between a particular direction for a qValue,
% and the max of all the other directions. Then only takes the positive
% values. So it's essentially like saying 'when does each action 'win' the
% affordance competition'

oldQ = plQ.qVals{1};
newQ = oldQ;


% Loop through action types, and find the positive,
% above-other-actions'-max values
for iAct = 1:length(actNames)
    
    % Select actions which fit the criteria for this action type
    cAct = actCriteria{iAct}(sFPl.clc.actConsequence);
    % Also identify all actions which are NOT this action type
    oAct = ~cAct;

    % Find the value within this class of actions, relative to the max
    % of other actions classes
    maxRelQ = oldQ(cAct,:,:,:) - max(oldQ(oAct,:,:,:), [], 1);
    % Remove negative values, i.e. only keep positive
    maxRelQpos = maxRelQ;
    maxRelQpos(maxRelQpos < 0) = 0;

    % Insert back into the Q value matrix
    newQ(cAct,:,:,:) = maxRelQpos;

end

plQ.qVals{1} = newQ;

end
% -------------------------------------------------------------------------


% -------------------------------------------------------------------------
function [sFPl, f] = PlotBaseBody(f, s, sHndSide, sBdy, sHed, allQ)
% HAND
% Check whether it's got the wrong starting column
if all(sHndSide.clc.startSC < 15)
    sHndSide.clc.startSC = sHndSide.clc.startSC + 10
end
sFPl = sHndSide ;
plQ = allQ(14,:);
sFPl.clc.startRew       = s.plt.bodyCol;
sFPl.clc.plS.iAct       = 1:43;
sFPl.clc.plS.ActFun     = @(x) max(x,[],1);
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 0; % semi-arbitrary offset to get around how voxelsurf.m deals with negative numbers
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < -1;
sFPl.clc.plS.plSkin     = 'Y';
sFPl.clc.plS.plField    = 'N'; %

% [1 sY 1 sX 1 sZ]
sFPl.clc.plS.volSettings= {true,s.plt.sizePlot,1};

[newQ, f] = PlotQMaps(sFPl,plQ,f); hold on

ylim(s.plt.lims3D(1,:));
xlim(s.plt.lims3D(2,:));
zlim(s.plt.lims3D(3,:));
hold on


% BODY
sFPl = sBdy;
plQ = allQ(2,:);
sFPl.clc.startRew       = s.plt.bodyCol;
sFPl.clc.plS.iAct       = 1:7;
sFPl.clc.plS.ActFun     = @(x) max(x,[],1);
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 0; 
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < -1;
sFPl.clc.plS.plSkin     = 'Y';
sFPl.clc.plS.plField    = 'N';

sFPl.clc.plS.volSettings= {true,s.plt.sizePlot,1};
[newQ, f] = PlotQMaps(sFPl,plQ,f);


% HEAD
sFPl = sHed;
plQ = allQ(6,:);
sFPl.clc.startRew       = s.plt.bodyCol;
sFPl.clc.plS.iAct       = 1:7;
sFPl.clc.plS.ActFun     = @(x) max(x,[],1);
sFPl.clc.plS.plDim      = 3;
sFPl.clc.plS.offset     = 0; 
sFPl.clc.plS.excl3D     = @(x) abs(x-sFPl.clc.plS.offset) < -1;
sFPl.clc.plS.plSkin     = 'Y';
sFPl.clc.plS.plField    = 'N';

sFPl.clc.plS.volSettings= {true,s.plt.sizePlot,1};
[newQ, f] = PlotQMaps(sFPl,plQ,f);

view([-28 22.5])
axis off
end
% -------------------------------------------------------------------------