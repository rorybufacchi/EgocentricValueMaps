% -----
% USE:
% 
% - Run this script to re-create:
% -- The elements used for making Figure 7 of the main paper
% -- The elements used for making Extended Data Figures 4 and 5
% -- The statistical results related to Figure 7, and Extended data Figs 4 & 5
%
% - The data necessary for this figure is generated by CreateDataForPlots_Final.m,
% !HOWEVER! a pre-computed version can also be loaded (much faster) from:
% ~~~~~~~~~~~~~~~ https://doi.org/10.5281/zenodo.16408688 ~~~~~~~~~~~~~~~
% -----


% First make sure the path is set right though
cFileName       = matlab.desktop.editor.getActiveFilename;
codePath        = cFileName(1:end-36)
addpath(        genpath(codePath));


% NOTE: Change this to the file path where you store the generated data,
% whether downloaded or generated by yourself
dataPath                    = ''; % 'C:\Users\Rory Bufacchi\Documents\Projects\DefenseAgent'; 
if              isempty(dataPath)
     dataPath       = SetPathEgocentricMapsData();
end
cd(             dataPath)



%% ------------------------------------------------------------------------
%  LOAD fitted data for Fig7 and Extended Data Figs 4&5
try
    load('Results\ForFigures\Fig6_7_ModelledData_Precomputed.mat');
    load('Results\ForFigures\Fig6_7_FittedData_Precomputed.mat');
catch
    warning('No Precomputed data found. Either Compute results using CreateModelDataToFit_Final.m, or download precompted results from $')
end



%% STATS & Extended Data Fig 5 - fit quality of all tested models

f.STATS.f = figure('Position',[20 -20 400 1200]);

allF = fields(fitRes);
fieldNames = {'Q Value' , 'HitProb', 'MultInt', 'Uncert Q', 'SARSA', 'Exponential', 'Sigmoid', 'Linear'};

tmpGoFAll = arrayfun(@(iF) fitRes.(allF{iF}).gofScore ,1:length(allF));
tmpAICAll = arrayfun(@(iF) fitRes.(allF{iF}).AIC ,1:length(allF));
tmpBICAll = arrayfun(@(iF) fitRes.(allF{iF}).BIC ,1:length(allF));

for iF = 1:length(allF)

    cAx = subplot(length(allF) , 2 , 1 + (iF-1) .* 2 );

    N   = numel([dQ.realDat{:}]);
    dof = numel(fitRes.(allF{iF}).p);
    k   = N - dof;

    plot(1 - chi2cdf(0:500 ,k),'LineWidth',2); hold on
    yLims = ylim;
    plot([fitRes.(allF{iF}).chiSq fitRes.(allF{iF}).chiSq], yLims,'r','LineWidth',2);

    xlim([0 500])

    xlabel('total error (ChiSquare)')
    if iF == length(allF)
        ylabel('probability');
    end
    title([allF{iF} '. p = ' num2str(fitRes.(allF{iF}).pVal1) ])


    disp(sprintf('%s model. GoF: %.2f. AIC: %.2f. BIC: %.2f', allF{iF}, fitRes.(allF{iF}).gofScore, fitRes.(allF{iF}).AIC, fitRes.(allF{iF}).BIC))
    disp(['GoF score: ' num2str(fitRes.(allF{iF}).gofScore)]);
    disp(' ');

    if iF == length(allF)
        legend('Expected distribution of total error if data is generated by a process like the model', ...
               'Observed total error', 'Location','South');
    end

    cAx = subplot(length(allF) , 2 , iF .* 2 );


    tmpGoF = tmpGoFAll(iF) - tmpGoFAll(1);
    tmpAIC = tmpAICAll(iF);
    tmpBIC = tmpBICAll(iF);

    yyaxis left
    bar((1:length(tmpGoF)) - 0.25 , tmpGoF , .2, 'FaceColor', [0.1 0.1 0.8])
    ylim([-3.75 15])
    ylabel('Normalized Error')
    box off

    yyaxis right
    bar( (1:length(tmpGoF))       ,  ( tmpAIC - tmpAICAll(1)  )' , .2 , 'FaceColor', [0.7 0 0.2] ); hold on
    bar( (1:length(tmpGoF)) + 0.25,  ( tmpBIC - tmpBICAll(1)  )' , .2 , 'FaceColor', [0.85 0.4 0])
    xlabel('')
    ylabel('Delta IC')
    if iF == length(allF)
        legend('GoF','AIC','BIC')
    end
    xLim = xlim;
    plot(xLim,[10 10],'-.k')
    ylim([-50 200]);
    set(cAx,'xTicklabels',fieldNames );
    box off
end



%% Fig7 & Extended Data Fig 4f-p - example fits of Egocentric Maps to empirical data

% Define which fitted data to plot
d      = fitRes.Q.d;

allXDat = [];
allYDat = [];

f.NEATDATA.f        = figure('Position',[20 20 2000 1200])
f.ALLDATABYEXPTS.f  = figure('Position',[20 20 900 900])

plOpts.shadeFl  = 0;
plOpts.errBFl   = 1;
plOpts.errBopts = {'LineWidth',.5,'CapSize',1};

plotTitles = {'Art  1, Exp 1: AudTac Trunk Stim','Art 1, Exp 2: AudTac Hand Stim',... 1
              'Art  1, Exp 3: AudTac Trunk/Hand Stim, Hand on Chest', ... 2
              'Art  1, Exp 4: AudTac Between Hand and Chest, Hand Stim',... 3
              'Art  1, Exp 5: AudTact conr/incongr Head Stim', ... 4
              'Art  1, Exp 6: AudTact conr/incongr Chest Stim', ... 5
              'Art  1, Exp 7: VisTact Head/Chest Stim', ... 6
              'Art  2, Exps 1-7 (N=180): Tool Use', ... 7
              'Art  3: Spider vs Butterfly approaching',... 8
              'Art  4: EEG Mu during reachability judgements', ... 9
              'Art  5: EEG Alpha during rake tool use',... 10
              'Art  6: fMRI dPOS', ... 11
              'Art  7: fMRI dIPS PMv', ... 12
              'Art  8: Macaque single arm-senstive neurons', ... 13
              'Art  8: Macaque single face-senstive neurons', ... 14
              'Art  9: AudTac HandStim, varying valence' ... 15
              'Art 10: AudTac BackStim, varying valence'};  % 16

allConds = { {'Towards','Away'}, {'Towards','Away'}, ... 1
               {'Towards','Away'}, ... 2
               {'Hand by Side', 'Hand by Chest'}, ... 3 
               {'Towards Head', 'Towards Body'}, ... 4 
               {'Towards Body', 'Towards Head'}, ... 5 
               {'Stim Chest', 'Stim Head'}, ... 6 
               {'No Tool', 'Tool'}, ... 7 
               {'Butterfly Coll', 'Butterfly Non-Coll', 'Spider Coll', 'Spider Non-Coll'}, ... 8
               {''}, ... 9  'Reachability mu decrease'
               {'Post cogn training','Post tool training'},... 10
               {'Moving vs stationary difference'}, ... 11
               {'dIPS','PMv'}, ... 12
               {'Arm Right','arm Left'}, ... 13
               {'Look Ahead','Look Right'}, ... 14
               {'Neutral','Negative','Positive'}, ... 15
               {'Positive','Negative'}}; % 16

plType  =    {'Line', 'Line',... 1sHndToolRake
              'Line', ... 2
              'Line', ... 3
              'Line', ... 4
              'Line', ... 5
              'Line', ... 6
              'Line', ... 7
              'Line', ... 8
              'Bar', ... 9
              'Bar', ... 10
              'Line', ... 11
              'Bar', ... 12
              'Line', ... 13
              'Line', ... 14
              'Line' , ... 15
              'Line'}; % 16


yLabs  =      {'Reaction time speeding (ms)', 'Reaction time speeding (ms)',... 1
              'Reaction time speeding (ms)', ... 2
              'Reaction time speeding (ms)', ... 3
              'Reaction time speeding (ms)', ... 4
              'Reaction time speeding (ms)', ... 5
              'Reaction time speeding (ms)', ... 6
              'Reaction time speeding (ms)', ... 7
              'Reaction time speeding (ms)', ... 8
              'Norm mu power (a.u.)', ... 9
              'Norm alpha power (a.u.)', ... 10
              'Bold difference (%)', ... 11
              'Bold difference (%)', ... 12
              'Neuronal response (% of max)', ... 13
              'Neuronal response (% of max)', ... 14
              'Reaction time speeding (ms)',... 15
              'Reaction time speeding (ms)', }; % 16


tickDescr =  { {'',''}, {'',''}, ... 1
               {'',''}, ... 2
               {'', ''}, ... 3 
               {'', ''}, ... 4 
               {'', ''}, ... 5 
               {'', ''}, ... 6 
               {'', ''}, ... 7 
               {'', '', '', ''}, ... 8
               {'Near','max reach','far'}, ... 9  'Reachability mu decrease'
               {'',''},... 10
               {''}, ... 11
               {'Faces','Cars','Spheres'}, ... 12
               {'Arm Right','Arm Left'}, ... 13
               {'Look Ahead','Look Right'}, ... 14
               {'','',''}, ... 15
               {'','',''}}; % 16

xLabs =  { {'Dist from body part (cm)'}, {'Dist from body part (cm)'}, ... 1
               {'Dist from body part (cm)'}, ... 2
               {'Dist from body part (cm)'}, ... 3 
               {'Dist from body part (cm)'}, ... 4 
               {'Dist from body part (cm)'}, ... 5 
               {'Dist from body part (cm)'}, ... 6 
               {'Dist from body part (cm)'}, ... 7 
               {'Dist from body part (cm)'}, ... 8
               {'Stimulus position'}, ... 9  'Reachability mu decrease'
               {'Dist from body part (cm)'},... 10
               {'Dist from body part (cm)'}, ... 11
               {'Stimulus Type'}, ... 12
               {'Dist from body part (cm)'}, ... 13
               {'Angle of approach (deg)'}, ... 14
               {'Dist from body part (cm)'}, ... 15
               {'Dist from body part (cm)'}}; % 16


% The lines from the data table to include
inclDs = {[1 2], [3 4], ... 1
          [5 7], ... 2
          [9 10],... 3
          [11 12], ... 4
          [13 14], ... 5
          [15 16], ... 6
          [17 18], ... 7
          [19:22], ... 8
          [23], ... 9
          [24 25], ... 10
          [26], ... 11
          [27 28] ... 12
          [29 30] ... 13
          [31 32] ... 14
          [33 34 35] ... 15
          [36 37]}; % 16

nPls = numel(inclDs); % number of plots
spW  = ceil(sqrt(nPls)); % subplot width

colOrd = {[0,0,1]; [1,0,0]; [0,0,.5]; [.5,0,0]};


for iSpl = 1:nPls

    figure(f.NEATDATA.f)

    subplot(3,6,iSpl)
    inclRows = inclDs{iSpl};
    cPlType = plType{iSpl};

    plDat            = [];
    ftDat            = [];
    plSTE            = [];
    plX              = [];
    ForNormPlot      = [];
    plDatForNormPlot = [];
    ftDatForNormPlot = [];

    for iDat = 1:numel(inclDs{iSpl})
        plDat(iDat,:) = d.realDat{inclRows(iDat)};
        plSTE(iDat,:) = d.realSTE{inclRows(iDat)};
        if iSpl == 14
            plX(iDat,:)   = d.cmPos{inclRows(iDat)}(2,:,:);
        elseif iSpl == 15
            plX(iDat,:) = [-30 -15 0 15 30];
        else
            plX(iDat,:)   = d.cmPos{inclRows(iDat)}(1,:,:);
        end
        ftDat(iDat,:) = d.fittedDat{inclRows(iDat)};
    
        % convert back to original units
        if ismember('realDatOrigSD',dQ.Properties.VariableNames)
            plDatForNormPlot(iDat,:) = plDat(iDat,:);
            ftDatForNormPlot(iDat,:) = ftDat(iDat,:);
            
            plDat(iDat,:) = (plDat(iDat,:) .* dQ.realDatOrigSD{inclRows(iDat)}) + dQ.realDatOrigMean{inclRows(iDat)};
            plSTE(iDat,:) = (plSTE(iDat,:) .* dQ.realDatOrigSD{inclRows(iDat)}) ;

            ftDat(iDat,:) = (ftDat(iDat,:) .* dQ.realDatOrigSD{inclRows(iDat)}) + dQ.realDatOrigMean{inclRows(iDat)};
        end
    end

    switch cPlType

        case 'Line'
            
            h = plot(plX',ftDat','LineWidth',1.5);
            set(h,{'color'},colOrd(1:numel(h),:));
            hold on;
            
            if plOpts.errBFl == 1
                h = errorbar(plX',plDat',plSTE','.','MarkerSize',20,plOpts.errBopts{:});
                set(h,{'color'},colOrd(1:numel(h),:));
            else
                h = plot(plX',plDat','.','MarkerSize',20,'LineWidth',.5);
                set(h,{'color'},colOrd(1:numel(h),:));
            end

            plot(plX',plDat','ok','MarkerSize',7,'LineWidth',1);
            
            if plOpts.shadeFl == 1
                for iD = 1:size(plX,1)
                    plOpts.c = colOrd{iD};
                    plOpts.PlotMean = 0;
                    plOpts.FaceAlpha = 0.2;
                    ShadedPlot(plX(iD,:),plDat(iD,:),plDat(iD,:) - plSTE(iD,:),plDat(iD,:) + plSTE(iD,:),plOpts);
                end
            end


        case 'Bar'
            b = bar(ftDat'); hold on
            for iDat = 1:size(plDat,1)
                h = errorbar(b(iDat).XEndPoints, plDat(iDat,:), plSTE(iDat,:),'.k','MarkerSize',0.001,plOpts.errBopts{:});
                set(h,{'color'},colOrd(iDat,:));

                h = plot(b(iDat).XEndPoints, plDat(iDat,:),'.k','MarkerSize',20);
                plot(b(iDat).XEndPoints, plDat(iDat,:),'ok','MarkerSize',7);
                set(h,{'color'},colOrd(iDat,:));
            end
            set(gca,'XTickLabels',tickDescr{iSpl});
    end

    title(plotTitles{iSpl})
    legend(allConds{iSpl})
    xlabel(xLabs{iSpl})
    ylabel(yLabs{iSpl})
    box off


    % Figure with data from each condition together
    figure(f.ALLDATABYEXPTS.f );
    allXDat = [allXDat; plDatForNormPlot(:)];
    allYDat = [allYDat; ftDatForNormPlot(:)];
    h = plot(plDatForNormPlot(:), ftDatForNormPlot(:),'.','MarkerSize',25);
    hold on;
    xlabel('Z-Scored Original Data (SD)')
    ylabel('Z-Scored Fitted Data (SD)')
    SquareSymAxes
    UnitLine
    title('Model fits the data well overall')
end
set(gca, 'ColorOrder','default')


%% Extended Data Fig 4q - weights of negative-valence contributions to egocentric maps

f.NegativeActivations.f = figure('Position',[200, 200, 700 200]);

subplot(1,3,1)
bar(fitRes.Q.p( [end - [6 5]]))
title('Huijsmans spider')

subplot(1,3,2)
bar(fitRes.Q.p( [end - (4:-1:2)]))
title('Ferri various sounds')

subplot(1,3,3)
bar(fitRes.Q.p([end-1, end]))
title('Taffou Cynophobic')



%% Save figures


allFields = fields(f);
for iF = 1:length(allFields)
    cF = allFields{iF};
    set(f.(cF).f, 'Renderer', 'painters'); % default, opengl
    saveas(f.(cF).f,['Results\Outputs\Figure7_ModelEmpirical' cF '.png'] , 'png')
    saveas(f.(cF).f,['Results\Outputs\Figure7_ModelEmpirical' cF '.eps'] , 'epsc')
    saveas(f.(cF).f,['Results\Outputs\Figure7_ModelEmpirical' cF '.pdf'] , 'pdf')
end
