% -----
% USE:
% 
% - Run this script to re-create:
% -- The elements used for making Figure S3 of the main paper
% -- The statistical results related to Figure S3
%
% - The data necessary for this figure is generated by CreateDataForPlots_Final.m,
% !HOWEVER! a pre-computed version can also be loaded (much faster) from:
% ~~~~~~~~~~~~~~~ https://doi.org/10.5281/zenodo.16408688 ~~~~~~~~~~~~~~~
% -----


% First make sure the path is set right
cFileName       = matlab.desktop.editor.getActiveFilename;
codePath        = cFileName(1:end-24);
addpath(genpath(codePath));


% NOTE: Change this to the file path where you store the generated data,
% whether downloaded or generated by yourself
dataPath        = '';
if              isempty(dataPath)
     dataPath       = SetPathEgocentricMapsData();
end
cd(             dataPath);

%% Load data
% NOTE: Load this if not computing the ANN outputs yourself
try
    load('Results\ForFigures\FigS3ab_Results_Precomputed.mat')
catch
    warning('No Precomputed data found. Either Compute results using CreateDataForPlots.m, or download precompted results from $')
end



%% Effect on reaction time

f.RT.f = figure('Position',[20 20 1200 800]);

f.RT.ax{1} = axes('Position',[.1 .1 .3 .5]);

w = rtRS(1).w;

humanMax30 = 2.132;

humanDat = ([1.577 -0.304] ./ humanMax30) .* 30;
humanSD  = ([1.577-1.209 , - .304+0.765] ./ humanMax30) .* 30;
f.RT.RealBars = bar(humanDat,'FaceColor','flat'); hold on
f.RT.RealBars.CData(2,:) = [1 0 0];
colrs = {'k','k'}
for iM = 1:2
    plot([iM iM] ,humanDat(iM) + [ - humanSD(iM) humanSD(iM)],colrs{iM},'LineWidth',2);
end
xlim([.5 2.5])
ylim([-12 40])

ylabel('Far - Near Reaction Time difference (s)')

f.RT.ax{1}.XTickLabel = {'Baseline', 'r-TMS'}

box off



% -------------------------------------------------------------------------
f.RT.ax{2} = axes('Position',[.55 .1 .3 .5]);

distances = [2:6 ; 8:12];

allLC = 2:14;
clear bpAvOverCols
for iM = 1:3
for iD = 1:size(distances,1)
for iLC = 2:length(allLC)
    cLC = allLC(iLC);
    bpAvOverCols(iLC,iD,iM) = nanmean(squeeze(rtRS(iM).avBP(w.lmb.row,cLC,distances(iD,:),cLC)));
end
end
end

% don't include the pure learned model
bpAvOverCols(:,:,1) = [];


tmpD    = squeeze(bpAvOverCols(:,2,:) - bpAvOverCols(:,1,:)   );
tmpM    = squeeze(nanmean( bpAvOverCols(:,2,:) - bpAvOverCols(:,1,:)   ));
tmpSD	= squeeze(nanstd( bpAvOverCols(:,2,:) - bpAvOverCols(:,1,:)  ))  ./sqrt(size(bpAvOverCols,1));
f.RT.ModelBars = bar(tmpM','FaceColor','flat'); box off
f.RT.ModelBars.CData(2,:) = [1 0 0];
hold on
boxplot(tmpD)
plotRowAveragesWithSpread_alt(tmpD');
hold on

for iM = 1:2
    for iD = 1:2
        plot([iM iM],tmpM(iM) + [ - tmpSD(iM) tmpSD(iM)],'k','LineWidth',2);
    end
end
xlim([.5 2.5])
ylim([-.2 1])

ylabel('Far - Near Reaction Time difference (a.u.)')

f.RT.ax{2}.XTickLabel = {'Baseline', sprintf('simulated \\newline TMS')}


% -------------------------------------------------------------------------
f.RT.ax{3} = axes('Position',[.1 .65 .3 .3]);
tmpFig = imread('Results\ForFigures\JPGs\TMS_v2.jpg');
alphaChan = ~all(tmpFig > 250, 3);
image(tmpFig,'AlphaData',alphaChan); axis off
title('TMS abolishes spatial RT effect')

% -------------------------------------------------------------------------
f.RT.ax{4} = axes('Position',[.55 .725 .3 .225]);
tmpFig = imread('Results\ForFigures\JPGs\TMS_NeurNet_NoStimulator.jpg');
alphaChan = ~all(tmpFig > 250, 3);
image(tmpFig,'AlphaData',alphaChan); axis off
title('simulated TMS abolishes spatial RT effect')

tmpD = squeeze(bpAvOverCols(:,2,:) - bpAvOverCols(:,1,:) );


[pRT hRT statsRT] = signrank(tmpD(:,1),zeros(size(tmpD(:,1))),'method','approximate')
effSizeNoLesion = statsRT.zval ./ sqrt(numel(tmpD(:,1)))

[pRT hRT statsRT] = signrank(tmpD(:,2),zeros(size(tmpD(:,1))),'method','approximate')
effSizeLesion = statsRT.zval ./ sqrt(numel(tmpD(:,2)))

[pRTcomp hRTcomp statsRTcomp] = ranksum(tmpD(:,1),tmpD(:,2),'method','approximate')
effSizeComp = statsRTcomp.zval ./ sqrt(numel(tmpD))


%% Save figures

allFields = fields(f);
for iF = 1:length(allFields)
    cF = allFields{iF};
    
    set(f.(cF).f, 'Renderer', 'painters'); % default, opengl
    saveas(f.(cF).f,['Results\Outputs\FigureS3_' cF '.png'] , 'png')
    saveas(f.(cF).f,['Results\Outputs\FigureS3_' cF '.eps'] , 'epsc')
    saveas(f.(cF).f,['Results\Outputs\FigureS3_' cF '.pdf'] , 'pdf')
end
