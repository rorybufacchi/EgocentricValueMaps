%% Assess the effect of network size on performance

addpath('F:\Projects\DPPS\DefenseAgent\Scripts\rlsimplepps')
addpath('F:\Projects\DPPS\DefenseAgent\Scripts')
addpath('F:\Programs\Matlab\Utilities\')
addpath('F:\Programs\Matlab\Utilities\plotting\colormaps\')

% % % load('F:\Projects\DPPS\DefenseAgent\Results\Performance\ToolUse\NetSizes\Mults_of_12_51Batch_V3');
% % % 
% % % % % load('F:\Projects\DPPS\DefenseAgent\Results\ForFigures\ToolUSe\Tool_Pre_post_61_201Batch_v2');
% % % 
% % % % % ntRS = olRS;
% % % % % ntRS(4:6) = ytRS;
% % % 
% % % 
% % % % f = figure,
% % % for iM = 1:length(ntRS)
% % %     
% % %     s = ntRS(iM).s;
% % %     w = ntRS(iM).w;
% % %     net = ntRS(iM).net;
% % %     
% % %     % Settings for plot
% % %     sFP=s;
% % %     sFP.plt.lmbCol = 3:s.wrld.size(2)-2;
% % %     sFP.plt.ON = 1;
% % %     sFP.plt.rowLims = [1.5 s.wrld.size(1)-0.5];
% % %     sFP.plt.sequentialLimbCols=0;    
% % %     sFP.plt.pltType = 'Imagesc';
% % %     
% % %     
% % %     sFP.plt.ToolPresent = 1;
% % %     
% % %     sFP.plt.meanLimbCols = 1;
% % %     sFP.plt.lmbCol=3:12;
% % %     
% % % %     sFP.plt.meanLimbCols = 0;
% % % %     sFP.plt.lmbCol= 6;
% % % %     
% % %     sFP.plt.plAct=2;
% % %     
% % %     sFP.plt.rowLag = 1;
% % %     sFP.plt.colLag = 0;
% % %     
% % %     sFP.plt.stimRow=[3:size(w.world2D,1)-1];
% % %     sFP.plt.stimCol=[2:size(w.world2D,2)-1];
% % %     %     sFP.plt.pltType = 'Binned';
% % %     
% % %     sFP = DefaultSettings(sFP);
% % %     
% % %     
% % %     % 	set(0, 'currentfigure', f);
% % %     subplot(1 + ceil(length(ntRS)/2),2,1)
% % %     tmp = s.prf.skipBatches;
% % %     plot(ntRS(iM).perf.rewPerAct(1:tmp:end,1),'LineWidth',2);
% % %     hold on;
% % %     
% % %     %     f2 = figure,
% % %     subplot(1 + ceil(length(ntRS)/2),2,1+iM)
% % %     [Q,allNeurAct] = CalcNetOutput(sFP,w,net);
% % %     DisplActValsFun(sFP,w,Q);
% % %     
% % % end
% % % subplot(1 + ceil(length(ntRS)/2),2,1)
% % % % set(0, 'currentfigure', f);
% % % legend('1','2','3','4','5','6','7','8','9','10','11');
% % % % hold off

%% Go through the models and find responses with- and without tool


% % load('F:\Projects\DPPS\DefenseAgent\Results\ForFigures\ToolUse\Tool_Pre_post_2_2Batch_ToolPos5_ProperRedo.mat')

% load('F:\Projects\DPPS\DefenseAgent\Results\ForFigures\ToolUse\Tool_Pre_post_51_51Batch_ToolPos4_moreRandSpr.mat')

% load('F:\Projects\DPPS\DefenseAgent\Results\ForFigures\ToolUse\Tool_Pre_post_51_51Batch_ToolPos4_moreRandSpr_NoHist.mat')

% load('F:\Projects\DPPS\DefenseAgent\Results\ForFigures\ToolUse\Tool_Pre_post_51_51Batch_ToolPos4_moreRandSpr_NoHist.mat')


% load('F:\Projects\DPPS\DefenseAgent\Results\ForFigures\ToolUSe\Tool_Pre_post_51_51Batch_ToolPos5_moreRandSpr_NoHist_V2');
load('F:\Projects\DPPS\DefenseAgent\Results\ForFigures\ToolUSe\Tool_Pre_post_51_51Batch_ToolPos5_moreRandSpr_NoHist_ToolAlwaysPresentButHalfNoReward');

% % To demonstrate these remapping effects in our model, we first trained a 
% % normal instance of the toy model without a ‘tool’, and then assessed its 
% % response when we gave it a tool. There was no clear change in the model’s 
% % action value response fields ($$$ STATS; Figure$$$B). 


% rS = olRS;
% rS = ytRS;

% Tool Present and No Tool Present assessment
olRS_tp = olRS;
olRS_ntp = olRS;
ytRS_tp = ytRS;
ytRS_ntp = ytRS;
olRS_tp_tf = olRS;
olRS_ntp_tf = olRS;
ytRS_tp_tf = ytRS;
ytRS_ntp_tf = ytRS;

for iM = 1:length(olRS)
    
    s = olRS(iM).s;
    w = olRS(iM).w;
    
    Qtable = olRS(iM).Qtable;
    
    s = DefaultSettings(s);
    s.plt.plotThrFl = 0;
    
    % settings for plot
    sFP = s;
    %     sFP.plt.lmbCol = 2:s.wrld.size(2)-1;
    sFP.plt.lmbCol = 3:s.wrld.size(2)-2;
    sFP.plt.ON = 0;
    sFP.plt.sequentialLimbCols = 0;
    sFP.plt.stimRow = [3:size(w.world2D,1)-1];
    sFP.plt.stimCol = [2:size(w.world2D,2)-1];
    sFP.plt.pltType = 'Binned';
    
    
    % =====================================================================
    % Calculate activity WRT limb location
    sFP.plt.DistFromTool = 0;
    sFP.plt.stimRow = [size(w.world2D,1)-6:size(w.world2D,1)-3]; % $$$ THIS IS TEST !!! $$$
    % ---------------------------------------------------------------------
    % Output form network which has NOT trained on tool use - tool NOT present
    net = olRS(iM).net;
    sFP.plt.ToolPresent = 0;
    [Q,allNeurAct] = CalcNetOutput(sFP,w,net);
    [olRS_ntp(iM).rDistN, olRS_ntp(iM).pDistN, olRS_ntp(iM).hProxN, aD, rD, cD] = CalcDistCorr(sFP,w,permute(allNeurAct,[3 4 1 2 5 6]));
    [olRS_ntp(iM).rDistQ, olRS_ntp(iM).pDistQ, olRS_ntp(iM).hProxQ, aDQ, rDQ, cDQ] = CalcDistCorr(sFP,w,Q);
    [olRS_ntp(iM).npks olRS_ntp(iM).pks olRS_ntp(iM).pkLocs] = RowPeakFind(sFP,Q);
    Qall(:,:,:,:,:,iM,1) = Q;
    if iM == 1
        nAall = nan([size(allNeurAct(:,:,:,:,1)) 5 16 length(olRS) 4]);
    end
    nAall(:,:,:,:,:,1:size(allNeurAct,6),iM,1) = permute(allNeurAct,[3 4 1 2 5 6]);
    
    % ---------------------------------------------------------------------
    % Output form network which has NOT trained on tool use - tool present
    net = olRS(iM).net;
    sFP.plt.ToolPresent = 1;
    [Q,allNeurAct] = CalcNetOutput(sFP,w,net);
    [olRS_tp(iM).rDistN, olRS_tp(iM).pDistN, olRS_tp(iM).hProxN, aD, rD, cD] = CalcDistCorr(sFP,w,permute(allNeurAct,[3 4 1 2 5 6]));
    [olRS_tp(iM).rDistQ, olRS_tp(iM).pDistQ, olRS_tp(iM).hProxQ, aDQ, rDQ, cDQ] = CalcDistCorr(sFP,w,Q);
    [olRS_tp(iM).npks olRS_tp(iM).pks olRS_tp(iM).pkLocs] = RowPeakFind(sFP,Q);
    Qall(:,:,:,:,:,iM,2) = Q;
    nAall(:,:,:,:,:,1:size(allNeurAct,6),iM,2) = permute(allNeurAct,[3 4 1 2 5 6]);
    
    % ---------------------------------------------------------------------
    % Output form network which HAS trained on tool use - tool NOT present
    net = ytRS(iM).net;
    sFP.plt.ToolPresent = 0;
    [Q,allNeurAct] = CalcNetOutput(sFP,w,net);
    [ytRS_ntp(iM).rDistN, ytRS_ntp(iM).pDistN, ytRS_ntp(iM).hProxN, aD, rD, cD] = CalcDistCorr(sFP,w,permute(allNeurAct,[3 4 1 2 5 6]));
    [ytRS_ntp(iM).rDistQ, ytRS_ntp(iM).pDistQ, ytRS_ntp(iM).hProxQ, aDQ, rDQ, cDQ] = CalcDistCorr(sFP,w,Q);
    [ytRS_ntp(iM).npks ytRS_ntp(iM).pks ytRS_ntp(iM).pkLocs] = RowPeakFind(sFP,Q);
    Qall(:,:,:,:,:,iM,3) = Q;
    nAall(:,:,:,:,:,1:size(allNeurAct,6),iM,3) = permute(allNeurAct,[3 4 1 2 5 6]);
    
    % ---------------------------------------------------------------------
    % Output form network which HAS trained on tool use - tool present
    net = ytRS(iM).net;
    sFP.plt.ToolPresent = 1;
    [Q,allNeurAct] = CalcNetOutput(sFP,w,net);
    [ytRS_tp(iM).rDistN, ytRS_tp(iM).pDistN, ytRS_tp(iM).hProxN, aD, rD, cD] = CalcDistCorr(sFP,w,permute(allNeurAct,[3 4 1 2 5 6]));
    [ytRS_tp(iM).rDistQ, ytRS_tp(iM).pDistQ, ytRS_tp(iM).hProxQ, aDQ, rDQ, cDQ] = CalcDistCorr(sFP,w,Q);
    [ytRS_tp(iM).npks ytRS_tp(iM).pks ytRS_tp(iM).pkLocs] = RowPeakFind(sFP,Q);
    Qall(:,:,:,:,:,iM,4) = Q;
    nAall(:,:,:,:,:,1:size(allNeurAct,6),iM,4) = permute(allNeurAct,[3 4 1 2 5 6]);
    
    % =====================================================================
    % Calculate activity WRT tool location - _tf refers to 'tool frame' (of
    % reference)
	sFP.plt.DistFromTool = 1;
    sFP.plt.stimRow = [3:size(w.world2D,1)-8]; % $$$ THIS IS TEST !!! $$$
    % ---------------------------------------------------------------------
    % Output form network which has NOT trained on tool use - tool NOT present
    net = olRS(iM).net;
    sFP.plt.ToolPresent = 0;
    [Q,allNeurAct] = CalcNetOutput(sFP,w,net);
    [olRS_ntp_tf(iM).rDistN, olRS_ntp_tf(iM).pDistN, olRS_ntp_tf(iM).hProxN, aD, rD, cD] = CalcDistCorr(sFP,w,permute(allNeurAct,[3 4 1 2 5 6]));
    [olRS_ntp_tf(iM).rDistQ, olRS_ntp_tf(iM).pDistQ, olRS_ntp_tf(iM).hProxQ, aDQ, rDQ, cDQ] = CalcDistCorr(sFP,w,Q);
    [olRS_ntp_tf(iM).npks olRS_ntp_tf(iM).pks olRS_ntp_tf(iM).pkLocs] = RowPeakFind(sFP,Q);
    
    % ---------------------------------------------------------------------
    % Output form network which has NOT trained on tool use - tool present
    net = olRS(iM).net;
    sFP.plt.ToolPresent = 1;
    [Q,allNeurAct] = CalcNetOutput(sFP,w,net);
    [olRS_tp_tf(iM).rDistN, olRS_tp_tf(iM).pDistN, olRS_tp_tf(iM).hProxN, aD, rD, cD] = CalcDistCorr(sFP,w,permute(allNeurAct,[3 4 1 2 5 6]));
    [olRS_tp_tf(iM).rDistQ, olRS_tp_tf(iM).pDistQ, olRS_tp_tf(iM).hProxQ, aDQ, rDQ, cDQ] = CalcDistCorr(sFP,w,Q);
    [olRS_tp_tf(iM).npks olRS_tp_tf(iM).pks olRS_tp_tf(iM).pkLocs] = RowPeakFind(sFP,Q);
    
    % ---------------------------------------------------------------------
    % Output form network which HAS trained on tool use - tool NOT present
    net = ytRS(iM).net;
    sFP.plt.ToolPresent = 0;
    [Q,allNeurAct] = CalcNetOutput(sFP,w,net);
    [ytRS_ntp_tf(iM).rDistN, ytRS_ntp_tf(iM).pDistN, ytRS_ntp_tf(iM).hProxN, aD, rD, cD] = CalcDistCorr(sFP,w,permute(allNeurAct,[3 4 1 2 5 6]));
    [ytRS_ntp_tf(iM).rDistQ, ytRS_ntp_tf(iM).pDistQ, ytRS_ntp_tf(iM).hProxQ, aDQ, rDQ, cDQ] = CalcDistCorr(sFP,w,Q);
    [ytRS_ntp_tf(iM).npks ytRS_ntp_tf(iM).pks ytRS_ntp_tf(iM).pkLocs] = RowPeakFind(sFP,Q);
    
    % ---------------------------------------------------------------------
    % Output form network which HAS trained on tool use - tool present
    net = ytRS(iM).net;
    sFP.plt.ToolPresent = 1;
    [Q,allNeurAct] = CalcNetOutput(sFP,w,net);
    [ytRS_tp_tf(iM).rDistN, ytRS_tp_tf(iM).pDistN, ytRS_tp_tf(iM).hProxN, aD, rD, cD] = CalcDistCorr(sFP,w,permute(allNeurAct,[3 4 1 2 5 6]));
    [ytRS_tp_tf(iM).rDistQ, ytRS_tp_tf(iM).pDistQ, ytRS_tp_tf(iM).hProxQ, aDQ, rDQ, cDQ] = CalcDistCorr(sFP,w,Q);
    [ytRS_tp_tf(iM).npks ytRS_tp_tf(iM).pks ytRS_tp_tf(iM).pkLocs] = RowPeakFind(sFP,Q);
    
end

%% Display the number of peaks

clear npks
for iM = 1:length(olRS)

    npks(:,1,iM) = olRS_ntp(iM).npks;
    npks(:,2,iM) = olRS_tp(iM).npks;
    npks(:,3,iM) = ytRS_ntp(iM).npks;
    npks(:,4,iM) = ytRS_tp(iM).npks;

end

for iCond = 1:size(npks,2)
    tmp = npks(:,iCond,:);
    npksVec(:,iCond) = tmp(:);
end

nanmean(npksVec)
nanstd(npksVec)


disp(['Before tool training, WITH tool, ' ...
    num2str(nanmean(npksVec(:,2))) ' +-' ...
    num2str(nanstd(npksVec(:,2))) ' spatial Q peaks'])

disp(['Before tool training, WITHOUT tool, ' ...
    num2str(nanmean(npksVec(:,1))) ' +-' ...
    num2str(nanstd(npksVec(:,1))) ' spatial Q peaks'])

disp(['After tool training, WITH tool, ' ...
    num2str(nanmean(npksVec(:,4))) ' +-' ...
    num2str(nanstd(npksVec(:,4))) ' spatial Q peaks'])

disp(['After tool training, WITHOUT tool, ' ...
    num2str(nanmean(npksVec(:,3))) ' +-' ...
    num2str(nanstd(npksVec(:,3))) ' spatial Q peaks'])


disp('-------------------')
disp('INEFFECTIVE tool training, pre vs post:')


[pTl,tblTl,statsTl] = anova2([npksVec(:,1:2) ; npksVec(:,3:4)],size(npksVec,1))

% Partial eta squared
disp('Eta squared effect sizes: ')
tblTl{2,2}./(tblTl{2,2} + tblTl{6,2})
tblTl{3,2}./(tblTl{3,2} + tblTl{6,2})
tblTl{4,2}./(tblTl{4,2} + tblTl{6,2})

%% Post-hoc stats.
disp('Tool no tool pre training')
[pTl1 hTl stats] = signrank(npksVec(:,1),npksVec(:,2),'method','approximate')
effSizR1 = stats.zval ./ sqrt(numel(npksVec(:,4).*2))

disp('Tool no tool post training')
[pTl2 hTl stats] = signrank(npksVec(:,3),npksVec(:,4),'method','approximate')
effSizR1 = stats.zval ./ sqrt(numel(npksVec(:,4).*2))

disp('No tool pre vs post training')
[pTl hTl stats] = signrank(npksVec(:,1),npksVec(:,3),'method','approximate')
disp('Yes tool pre vs post training')
[pTl hTl stats] = signrank(npksVec(:,2),npksVec(:,4),'method','approximate')

% % % disp('Tool no tool pre training')
% % % [pTl1 hTl stats] = signrank(npksVec(:,1),npksVec(:,2))
% % % disp('Tool no tool post training')
% % % [pTl2 hTl stats] = signrank(npksVec(:,3),npksVec(:,4))
% % % disp('No tool pre vs post training')
% % % [pTl hTl stats] = signrank(npksVec(:,1),npksVec(:,3))
% % % disp('Yes tool pre vs post training')
% % % [pTl hTl stats] = signrank(npksVec(:,2),npksVec(:,4))

% % nanmean(olRS_ntp(iM).npks), nanstd(olRS_ntp(iM).npks)
% % nanmean(olRS_tp(iM).npks), nanstd(olRS_tp(iM).npks)
% % nanmean(ytRS_ntp(iM).npks), nanstd(ytRS_ntp(iM).npks)
% % nanmean(ytRS_tp(iM).npks), nanstd(ytRS_tp(iM).npks)

[A B C] = fdr([pTl1 pTl2])




%% Get proximity data

for iM = 1:length(olRS)
[olRS(iM).rDistQ, olRS(iM).pDistQ, olRS(iM).hProxQ, aDQ, rDQ, cDQ] = ...
    CalcDistCorr(sFP,w,Qall(:,:,:,:,:,iM,1));
[ytRS(iM).rDistQ, ytRS(iM).pDistQ, ytRS(iM).hProxQ, aDQ, rDQ, cDQ] = ...
    CalcDistCorr(sFP,w,Qall(:,:,:,:,:,iM,3));

[olRS(iM).rDistN, olRS(iM).pDistN, olRS(iM).hProxN, aD, rD, cD] = ...
            CalcDistCorr(sFP,w,nAall(:,:,:,:,:,:,iM,1));
[ytRS(iM).rDistN, ytRS(iM).pDistN, ytRS(iM).hProxN, aD, rD, cD] = ...
            CalcDistCorr(sFP,w,nAall(:,:,:,:,:,:,iM,3));
end


[rMatOL] = DisplayProxStats(olRS);
[rMatYT] = DisplayProxStats(ytRS);

%% Calculate number of neuron peaks with particular number of peaks in each layer

for iCond = 1:size(nAall,8)
    for iM = 1:size(nAall,7)
        for iN = 1:size(nAall,6)
        for iL = 1:size(nAall,5)
            tmpNA = nAall(:,:,:,:,iL,iN,iM,iCond);
            if min(isnan(tmpNA(:))) == 1
                npksN(:,iL,iN,iM,iCond) = NaN;
            else
npksN(:,iL,iN,iM,iCond)  = RowPeakFind(sFP,nAall(:,:,:,:,iL,iN,iM,iCond));
            end
        end
        end
    end
end

%% mean number of peaks per layer

rMatOL.npksN      = npksN;
rMatYT.npksN      = npksN;

maxL = max(arrayfun(@(i) length(olRS(i).s.lp.netS) ,1:length(olRS)));

rMat.nPeaksPerNeur = squeeze(nanmean(npksN(:,:,:,:,:),[1]));
rMat.peaksPerLay   = squeeze(nanmean(npksN(:,:,:,:,:),[1 2]));

for iM = 1:length(olRS)
    
    for iL = 1:length(olRS(iM).s.lp.netS)
        
        rMat.peakDifferencesPreTrain(:,iL,iM)              = rMat.nPeaksPerNeur(iL,:,iM,2) - rMat.nPeaksPerNeur(iL,:,iM,1);
        rMat.peakDifferencesPostTrain(:,iL,iM)             = rMat.nPeaksPerNeur(iL,:,iM,4) - rMat.nPeaksPerNeur(iL,:,iM,3);
        rMat.peakDifferencesProPostTrainWithTool(:,iL,iM)  = rMat.nPeaksPerNeur(iL,:,iM,4) - rMat.nPeaksPerNeur(iL,:,iM,2);
        
        rMat.propOfCorrToolRespPreTrain(iL,iM) = nansum(rMat.peakDifferencesPreTrain(:,iL,iM) > 0 & ...
            rMatOL.pDistN(iL,:,iM)' < 0.05) ./ nansum(rMatOL.pDistN(iL,:,iM)' < 0.05);
        
%         rMat.propOfCorrToolRespPostTrain(iL,iM) = nansum(rMat.peakDifferencesPostTrain(:,iL,iM) > 0 & ...
%             rMatYT.pDistN(iL,:,iM)' < 0.05) ./ nansum(rMatYT.pDistN(iL,:,iM)' < 0.05);

        rMat.propOfCorrToolRespPostTrain(iL,iM) = nansum(rMat.peakDifferencesPostTrain(:,iL,iM) > 0 & ...
                    rMatOL.pDistN(iL,:,iM)' < 0.05) ./ nansum(rMatOL.pDistN(iL,:,iM)' < 0.05);
                
                
        % Proportion of neurons that got more peaks in the tool trained
        % condition than in the tool untrained condition?
        rMat.propOfCorrToolRespPrePostTrain(iL,iM) = nansum(rMat.peakDifferencesProPostTrainWithTool(:,iL,iM) > 0 & ...
                    rMatOL.pDistN(iL,:,iM)' < 0.05) ./ nansum(rMatOL.pDistN(iL,:,iM)' < 0.05);
        
    end
    
end
 
figure,plot(rMatOL.relLayDep,nanmean(rMat.peakDifferencesPreTrain,[1 3]))

figure,plot(rMatOL.relLayDep,nanmean(rMat.peakDifferencesPostTrain,[1 3]))

figure,plot(rMatOL.relLayDep,nanmean(rMat.peakDifferencesProPostTrainWithTool,[1 3]))


opts.testType = 'lme';
[figString rhoVal pVal fullStats] = CorrelationTitle(rMatOL.relLayDep,rMat.propOfCorrToolRespPrePostTrain,opts);

figure, plot (rMatOL.relLayDep,rMat.propOfCorrToolRespPrePostTrain,'-o','LineWidth',2);
title(figString);
xlabel('Relative layer depth')
ylabel('Proportion of tool use PPS neurons')

disp(['Relationship between neural layer PPS-and tooluse-ness: ' figString]);disp(' ') 


disp('-------------------------')
disp('Overall proportion of tool sensitive neurons')
rMat.OverallPropOfCorrToolRespPrePostTrain = nansum(rMat.peakDifferencesProPostTrainWithTool(:,:,iM) > 0 & ...
                    permute(rMatOL.pDistN,[2 1 3]) < 0.05 ,[1 2]) ./ nansum( permute(rMatOL.pDistN,[2 1 3]) < 0.05 , [1 2]);
nanmean(rMat.OverallPropOfCorrToolRespPrePostTrain)
disp('+ -')
nanstd(rMat.OverallPropOfCorrToolRespPrePostTrain)

disp('-------------------------')
disp('Last layer proportion of tool sensitive neurons')
nanmean(rMat.propOfCorrToolRespPrePostTrain')
nanstd(rMat.propOfCorrToolRespPrePostTrain')

%% See whether receptive field size expanded or shrank


% for iCond = 1:size(nAall,8)
%     for iM = 1:size(nAall,7)
%         for iN = 1:size(nAall,6)
%         for iL = 1:size(nAall,5)
%             tmpNA = nAall(:,:,:,:,iL,iN,iM,iCond);
%             if min(isnan(tmpNA(:))) == 1
%                 fieldSize(:,iL,iN,iM,iCond) = NaN;
%             else
%                 % $$$ here here
% [dmyn pks] = RowPeakFind(sFP,nAall(:,:,:,:,iL,iN,iM,iCond));
% if iL == 2
%     disp('test')
%     
% end
% % fieldSize(:,iL,iN,iM,iCond)  ;
%             end
%         end
%         end
%     end
% end


%% Number of peaks present in condition 4 on average:
nanmean(npksN(:,:,:,:,1),[1,3,4]) % one value for each of the 5 layers

%%
RowPeakFind(sFP,nAall(:,:,:,:,iL,iN,iM,iCond))
%%
RowPeakFind(sFP,Q)


%% DISPLAY RESULTS - Q-fields without tool and with tool djustable

% % % [rMat] = DisplayProxStats(olRS_ntp);
% % % [rMat] = DisplayProxStats(olRS_tp);
% % % [rMat] = DisplayProxStats(ytRS_ntp);
% % % [rMat] = DisplayProxStats(ytRS_tp); % $$$ this is a problem - SHOULD CORRELATE BUT DOESN'T 
% % % % $$$--> MAYBE i NEED TO ONLY FOCUS ON LIMITED NUMBER OF ROWS
% % %
% % %
% % % [rMat] = DisplayProxStats(olRS_ntp_tf);
% % % [rMat] = DisplayProxStats(olRS_tp_tf);
% % % [rMat] = DisplayProxStats(ytRS_ntp_tf);
% % % [rMat] = DisplayProxStats(ytRS_tp_tf);
% % 
% % disp('Q correlation with proximity')
% % disp(rMat.pDistQ)
% % 
% % disp([''])
% % disp(['Proportion of neurons that correlate with proximity'])
% % disp(rMat.propCorrNeur)
% % disp(['Av: ' num2str(nanmean(rMat.propCorrNeur)) '+-' num2str(nanstd(rMat.propCorrNeur)) ])
% % 
% % % also find proportion in last layer
% % for iM = 1:length(olRS)
% %     llCorr(iM) = rMat.propCorrNeurPerLay(length(olRS(iM).s.lp.netS),iM);
% % end
% % disp(['Last layer: ' num2str(nanmean(llCorr)) '+-' num2str(nanstd(llCorr)) ])


%% DISPLAY RESULTS - Q-fields without tool and with tool adjustable - fixed


[rMat_pre] = DisplayProxStats(olRS_tp_tf);


disp('Q correlation with proximity to tool BEFORE training with tool')
disp(rMat_pre.pDistQ)
disp(rMat_pre.rDistQ)

[rMat_post] = DisplayProxStats(ytRS_tp_tf);
disp('Q correlation with proximity to tool AFTER training with tool')
disp(rMat_post.pDistQ)
disp(rMat_post.rDistQ)

%% Functions

function [npks pks locs] = RowPeakFind(s,Q)
    Qr = RecenterQNA(s,Q);
    Qline = squeeze(nanmean(Qr(1,:,:,:,:,:),[4]));
    for iLC = 2:size(Qline,2)-1
%         [pks{iLC-1} locs{iLC-1}] = findpeaks(Qline(iLC,:,3));
        [pks{iLC-1} locs{iLC-1}] = findpeaks(nanmean(Qline(iLC,:,:),3));
        npks(iLC-1) = length(locs{iLC-1});
    end
    
end