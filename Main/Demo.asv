%% DEMO, showing how to create bodypart-centred receptive fields, using 
% Tabular Q-learning (SECTION 1), and neural networks (SECTION 2)

% First make sure the path is set right though
cFileName       = matlab.desktop.editor.getActiveFilename;
basePath        = cFileName(1:end-12);
addpath(genpath(basePath));

%% SECTION 1 ==============================================================
% Demonstrate effects of discount factor, dynamics, and action repertoire 
% on bodypart centred fields, using ~TABULAR~ Q-learning

% -------------------------------------------------------------------------
% Specify which (2) discount factors to plot
allGammas       = [0.3, 0.7];

% -------------------------------------------------------------------------
% First run a quick dummy agent to get the world-structure 'w' 
% (Needed for plotting later)
s.rp.maxActions = 10; 
s.wrld.size     = [14 15];
s               = DefaultSettings(s);
[~, w]          = RunRLfun(s);

% -------------------------------------------------------------------------
% General settings for agent & environment
s.wrld.size                 = [14 15 1]; % Rows, Columns, Height
s.clc.startRew              = -1; % reward offered upon contact
s.clc.RewardBehindSurfaceFl = 0;
s.clc.checkCollisionFl      = 0;
s.clc.startSR               = 12;
s.clc.startSC               = 8;
s.clc.startSZ               = 1;
s.clc.nearPos               = [s.wrld.size(1)-0 8 1]';
s.clc.nReps                 = 1;
s.clc.stepUpdateFl          = 0; 
s.clc.nSteps                = 1;

% Random stimulus dynamics
rSpr                = 0;
rSprPr              = 1;
cSpr                = 0;
cSprPr              = 1;
zSpr                = 0; 
zSprPr              = 1;
s.clc.baseVel       = [1 0 0];
% x y z, Deterministic stimulus dynamics
s.clc.stimDynams    = @(pos) pos + s.clc.baseVel; % For approaching, set speed positive
s.clc.randSpread    = {rSpr cSpr zSpr}; % Put a little biit of x and z variability in? Kind of arbitrary
s.clc.spreadProb    = {rSprPr cSprPr  zSprPr}; % x y z, probabilities of spread
% Random sensory uncertainties
s.clc.sensSpread    = {[0] , [0] , [0]};
s.clc.sensProb      = {[1] , [1] , [1]};
% Movement consequences (This below setting makes the agent stationary)
s.clc.actConsequence= [0  0  0 ];


%  ------------------------------------------------------------------------
% figure settings
fS.w            = 32; % Width (cm)
fS.h            = 15; % Height
fS.x            = 5; % x screen position
fS.y            = 5; % y screen position
% fraction of width that's going to be filled
fS.fillW        = .99; 
% fraction of height that's going to be filled
fS.fillH        = .99; 
fS.sub.w        = [0.09 0.18 0.18 0.18 0.18]; % fraction of space that each subplot takes (width)
fS.sub.h        = [0.07 0.35 0.35]; % fraction of space that each subplot takes (height)
fS.gridXstart   = -4.5;
fS.gridXstep    = 1;
fS.gridYstart   = 3.5;
fS.gridYstep    = 1;
s.plt.colorLims = [0 0.7];
nWpl            = length(fS.sub.w); % number of plots in width
nHpl            = length(fS.sub.h); % number of plots in height
wSpace          = (fS.fillW-sum(fS.sub.w))./(nWpl-1) ; % fraction of space between subplots (width)
hSpace          = (fS.fillH-sum(fS.sub.h))./(nHpl-1) ; % space between subplots (height)
% subplot positions
spX             = MakeSubplotPos(fS.fillW, fS.sub.w, wSpace);
spY             = flip(MakeSubplotPos(fS.fillH, flip(fS.sub.h), hSpace));


% -------------------------------------------------------------------------
% Make a separate figure for each combination of gamma values (rows;
% by default in this demo there is only 1 row of allGammas)
for iFig    = 1:size(allGammas,1)
            
fig{iFig}   = figure('Units', 'centimeters', 'Position', [fS.x fS.y fS.w fS.h ]);

% SECTION 1(A) ------------------------------------------------------------
% GENERATE DATA: Create tabular Q values for subplots;
% Specific settings for each agent/environment

% Data for Plot1
allS{1}                     = DefaultSettings(s);
allS{1}.clc.gammaVal        = allGammas(iFig,1);
allS{1}.clc.randSpread      = {0 0 0}; % No random stimulus movement
allS{1}.clc.spreadProb      = {1 1 1}; % 100% probability of no random stimulus movement
allS{1}.clc.actConsequence  = [0 0 0]; % Only allow the agent to stay still for this plot
allQ{1}                     = CalcHPDirect(allS{1}); % Generate data
allQ{1}                     = repmat(permute(allQ{1},[4 5 2 3 1]),[14 15 1 1]); % Reshape data to make it work with plotting functions

% Data for Plot2
allS{2}                     = allS{1};
allS{2}.clc.gammaVal        = allGammas(iFig,2);
allQ{2}                     = CalcHPDirect(s);
allQ{2}                     = repmat(permute(allQ{2},[4 5 2 3 1]),[14 15 1 1]);

% Data for Plot3
allS{3}                     = allS{2};
allS{3}.clc.gammaVal        = allGammas(iFig,1);
allS{3}.clc.actConsequence  = [0  0  0 ; ... % action 1 stay
                               0  1  0 ; ... % action 2 left
                               0 -1  0];     % action 3 right
allQ{3}                     = CalcHPDirect(allS{3});
allQ{3}                     = repmat(permute(allQ{3},[4 5 2 3 1]),[14 15 1 1]);

% Data for Plot4
allS{4}                     = allS{3};
allS{4}.clc.gammaVal        = allGammas(iFig,2);
allQ{4}                     = CalcHPDirect(allS{4});
allQ{4}                     = repmat(permute(allQ{4},[4 5 2 3 1]),[14 15 1 1]);

% Data for Plot5
allS{5}                     = allS{4};
allS{5}.clc.gammaVal        = allGammas(iFig,1);
allS{5}.clc.randSpread      = {0,     [-1 0 1] , 0};
allS{5}.clc.spreadProb      = {1, 1 ./[ 3 3 3] , 1};
allS{5}.clc.actConsequence  = [0 0 0];
allQ{5}                     = CalcHPDirect(allS{5});
allQ{5}                     = repmat(permute(allQ{5},[4 5 2 3 1]),[14 15 1 1]);

% Data for Plot6
allS{6}                     = allS{5};
allS{6}.clc.gammaVal        = allGammas(iFig,2);
allQ{6}                     = CalcHPDirect(allS{6});
allQ{6}                     = repmat(permute(allQ{6},[4 5 2 3 1]),[14 15 1 1]);

% Data for Plot7
allS{7}                     = allS{6};
allS{7}.clc.gammaVal        = allGammas(iFig,1);
allS{7}.clc.actConsequence  = [0  0  0 ; ... % action 1 stay
                               0  1  0 ; ... % action 2 left
                               0 -1  0];     % action 3 right 
allQ{7}                     = CalcHPDirect(allS{7});
allQ{7}                     = repmat(permute(allQ{7},[4 5 2 3 1]),[14 15 1 1]);

% Data for Plot8
allS{8}                     = allS{7};
allS{8}.clc.gammaVal        = allGammas(iFig,2);
allS{8}.clc.actConsequence  = [0  0  0 ; ... % action 1 stay
                               0  1  0 ; ... % action 2 left
                               0 -1  0];     % action 3 right
allQ{8}                     = CalcHPDirect(allS{8});
allQ{8}                     = repmat(permute(allQ{8},[4 5 2 3 1]),[14 15 1 1]);



% SECTION 1(B) ------------------------------------------------------------
% DISPLAY DATA

% Display top 4 plots

% General settings for plots
sFP                     = s;
sFP.plt.lmbRow          = s.wrld.size(1)-2;
sFP.plt.rowLims         = [6.5 s.wrld.size(1)-1.5];
sFP.plt.colLims         = [3.5 s.wrld.size(2)-3.5];
sFP.plt.cBarFl          = 0;
sFP.plt.meanLimbCols    = 1;
sFP                     = DefaultSettings(sFP);
sFP.plt.axesVis         = 0;
sFP.plt.plAct           = 1;
sFP.plt.lmbCol          = 8;

% Plot 1
spl             = subplot(40,1000,1);
set(              spl, 'Position', [spX(2) spY(2) fS.sub.w(2)+wSpace/4 fS.sub.h(2) ]);
DisplActValsFun(  sFP,w, sign(allS{1}.clc.startRew) .* allQ{1}); hold on
GridOverImage(    fS,spl);

% Plot 2
spl             = subplot(40,1000,1);
set(              spl, 'Position', [spX(3)-wSpace/4 spY(2) fS.sub.w(3)+wSpace/4 fS.sub.h(2) ]);
DisplActValsFun(  sFP,w, sign(allS{2}.clc.startRew) .* allQ{2}); hold on
GridOverImage(    fS,spl);

% Plot 3
spl             = subplot(40,1000,1);
set(              spl, 'Position', [spX(4) spY(2) fS.sub.w(4)+wSpace/4 fS.sub.h(2) ]);
DisplActValsFun(  sFP,w, sign(allS{3}.clc.startRew) .* allQ{3}); hold on
GridOverImage(    fS,spl);

% Plot 4
spl             = subplot(40,1000,1);
set(              spl, 'Position', [spX(5)-wSpace/4 spY(2) fS.sub.w(5)+wSpace/4 fS.sub.h(2) ]);
DisplActValsFun(  sFP,w, sign(allS{4}.clc.startRew) .* allQ{4}); hold on
GridOverImage(    fS,spl);

%  ------------------------------------------------------------------------
% Display bottom 4 plots

% Plot 5
spl             = subplot(40,1000,1);
set(              spl, 'Position', [spX(2) spY(3) fS.sub.w(2)+wSpace/4 fS.sub.h(3) ]);
DisplActValsFun(  sFP,w, sign(allS{5}.clc.startRew) .* allQ{5}); hold on
GridOverImage(    fS,spl);

% Plot 6
spl             = subplot(40,1000,1);
set(              spl, 'Position', [spX(3)-wSpace/4 spY(3) fS.sub.w(3)+wSpace/4 fS.sub.h(2) ]);
DisplActValsFun(  sFP,w, sign(s.clc.startRew) .* allQ{6}); hold on
GridOverImage(    fS,spl);

% Plot 7
spl             = subplot(40,1000,1);
set(              spl, 'Position', [spX(4) spY(3) fS.sub.w(4)+wSpace/4 fS.sub.h(2) ]);
DisplActValsFun(  sFP,w, sign(allS{7}.clc.startRew) .* allQ{7}); hold on
GridOverImage(    fS,spl);

% Plot 8
spl             = subplot(40,1000,1);
set(              spl, 'Position', [spX(5)-wSpace/4 spY(3) fS.sub.w(5)+wSpace/4 fS.sub.h(2) ]);
DisplActValsFun(  sFP,w, sign(allS{8}.clc.startRew) .* allQ{8}); hold on
GridOverImage(    fS,spl);


%  ------------------------------------------------------------------------
% Add gamma labels
glPosx  = [3 2 5 4 3 2 5 4]; % gamma label x-positions
wST     = (wSpace/4) .*[-1 0 -1 0 -1 0 -1 0]; % width shift temp
glPosy  = [2 2 2 2 3 3 3 3]; % gamma label y-positions
for iGP = 1: length(glPosx)% gamma position
    
    gm      = allGammas(iFig,mod(iGP,2)+1); 
    tmpH    = (nHpl-2)./(nHpl-1); % extra space needed for the label

    spl     = subplot(40,1000,1);
    set(      spl, 'Position', [spX(glPosx(iGP))+wST(iGP) spY(glPosy(iGP))+fS.sub.h(glPosy(iGP))+hSpace.*.14 fS.sub.w(glPosx(iGP))+wSpace/4 fS.sub.h(1)/2 ]);
    fill(     [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none');
    set(      gca,'visible','off');
    FNT     = {'HorizontalAlignment', 'center', ...
               'FontSize', 14, 'Color', 1.*[1 1 1], };
    txt     = text(spl,0, 0, ['\gamma = ' num2str(gm)],'VerticalAlignment', 'middle',  FNT{:});
end

%  ------------------------------------------------------------------------
% Add Action group 1 label
% extra space needed for the label
spl         = subplot(40,1000,1);
set(           spl, 'Position', [spX(2) spY(1)-hSpace/3 fS.sub.w(2)+fS.sub.w(3)+wSpace fS.sub.h(1)+hSpace/3 ]);
fill(          [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(           gca,'visible','off')
FNT         = {'HorizontalAlignment', 'left', ...
               'FontSize', 14, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt         = text(spl,-.9, 0, 'Stay','VerticalAlignment', 'middle',  FNT{:});


%  ------------------------------------------------------------------------
% Add Action group 2 label
spl         = subplot(40,1000,1);
set(          spl, 'Position', [spX(4) spY(1)-hSpace/3 fS.sub.w(3)+fS.sub.w(4)+wSpace fS.sub.h(1)+hSpace/3 ]);
fill(         [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(          gca,'visible','off')
FNT         = {'HorizontalAlignment', 'left', ...
               'FontSize', 14, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt         = text(spl,-.9, 0, 'Left, Stay, Right','VerticalAlignment', 'middle',  FNT{:});

%  ------------------------------------------------------------------------
% Add Dynamics group 1 label
spl         = subplot(40,1000,1);
set(          spl, 'Position', [spX(1) spY(2) fS.sub.w(1)/3 fS.sub.h(2) ]);
fill(         [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(          gca,'visible','off')
FNT         = {'Rotation', 90, ...
               'HorizontalAlignment', 'center', ...
               'FontSize', 14, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt         = text(spl,0, 0, 'Deterministic','VerticalAlignment', 'middle',  FNT{:});


%  ------------------------------------------------------------------------
% Add Dynamics group 2 label
spl         = subplot(40,1000,1);
set(          spl, 'Position', [spX(1) spY(3) fS.sub.w(1)/3 fS.sub.h(3) ]);
fill(         [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(          gca,'visible','off')
FNT         = {'Rotation', 90, ...
               'HorizontalAlignment', 'center', ...
               'FontSize', 14, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt         = text(spl,0, 0, 'Probabilistic','VerticalAlignment', 'middle',  FNT{:});


%  ------------------------------------------------------------------------
% Add Rewards label
spl         = subplot(40,1000,1);
set(          spl, 'Position', [spX(1) spY(1)+(fS.sub.h(1)*(1/3))  fS.sub.w(1)+(wSpace*(3/4)) fS.sub.h(1)*(2/3) ]);
fill(         [-1 1 1 -1],[-1 -1 1 1],0.5*[1 1 1],'EdgeColor','none')
set(          gca,'visible','off')
FNT         = {'HorizontalAlignment', 'center', ...
               'FontSize', 12, 'FontWeight', 'bold','Color', 1.*[1 1 1], };
txt         = text(spl,0, 0, 'Rewards','VerticalAlignment', 'middle',  FNT{:});


if sign(s.clc.startRew) > 0
    colormap(whitetocol(100,[ 0   0   0.7 ]))
else
    colormap(whitetocol(100,[ 0.7 0   0   ]))
end

end


%% SECTION 2(A, TRAINING) =================================================
% Demonstrate how to create bodypart-centred receptive fields using simple
% ~ARTIFICIAL NEURAL NETWORKS~ for Q-learning
%
% NOTES:
%
% - While the ANN is trained, you will see 'countActions' increase until it
% hits 50,000. This is the data generation part.
%
% - Next, the network will be trained. In this case the agent is therefore
% trained using state transitions from a uniform policy, over 35 batches 
% of 7,000 stored transitions.
%
% - Collecting data should take about 45 seconds, training the network should
% take about 1.5 minutes
%
% - After running and training, the trained network will be stored in the
% base path specified in the pop-up box at the start
%
% You can also skip this step and go straight to SECTION 2(B), which will
% use a pretrained network from the repository

tic
clear s rS ntRS rtRS ytRS olRS

% -------------------------------------------------------------------------
% Base settings
s.gol.alSpR         = 1;
s.gol.alSpC         = [0 0];
s.gol.randSpr       = [0 0];
s.rp.maxActions     = 5e4; 
s.lp.minExp         = 2e7;
s.lp.b1Siz          = 1e4;
s.rl.maxRetr        = 35;
s.lp.bSiz           = 7e3;
s.wrld.size         = [14 15];
s.wrld.resetType    = 'BottomTop_InfLR';
s.lp.epsilon        = 0.3;
s.lmb.startCol      = 8;
s.fl.trainTable     = 1; 
s.fl.trainNet       = 1;
s.lp.netS           = [9 9 9 9];

% -------------------------------------------------------------------------
% Expand these arrays/cells to make the demo run for mutliple different
% types of settings

% For multiple gammas just set e.g. gammas  = [0.7; 0.3];
gammas              = [0.7];

% Add a cell with the movement options for each different run as e.g.:
% actionNames={{'LEFT','STAY','RIGHT'}, '{STAY'}};
% That will create an additional run in which the agent can only stay still
actionNames         = {{'LEFT','STAY','RIGHT'}};

% Add more rows to add additional goal dynamics. The first column indicates
% how many additional possibly y-directions the object can move along, and
% the second option indicates the number of additional possible
% x-directions.
goalDynamics        = [0 0];

% -------------------------------------------------------------------------
% Run each type of model
for iM              = 1:length(gammas)
    
    % Change to current model settings
    s.lp.gamma      = gammas(iM);
    s.act.Name      = actionNames{iM};
    s.gol.randSpr   = goalDynamics(iM,:);

    % Run the model and learn Q (table)
    disp(           'Generating data');
    [s w storedEps dmyNet Qtable] = RunRLfun(s);
    toc
    disp(           'Training ANN')
    [net Qtable1]   = RelearnNNFun(s,w,storedEps,dmyNet,Qtable);
    toc

    % Store results Structure (Not used here, but common in main analyses)
    rS(iM).s        = s; 
    rS(iM).Qtable   = Qtable1; 
    rS(iM).w        = w; 
    rS(iM).net      = net;
end

svNm                = 'Demo_ANN_Results.mat';
try
    save(           svNm,'rS','-v7.3')
catch
    save(           svNm,'rS')
end

%% SECTION 2(B, VISUALISING) ==============================================
% Demonstrate how to PLOT bodypart-centred receptive fields output by an
% artificial neural network, as well as activity of individual 
% artificial neurons

load(               'Demo_ANN_Results.mat');

% -------------------------------------------------------------------------
% Plot a bodypart-centred Q-field (output by the ANN agent)

% plot settings
s.plt.plAct         = 2; % Plot value for the 'stay still' action
s.plt.lmbCol        = 2:14; % Average over all possible limb positions
s.plt.meanLimbCols  = 1; % Average over all possible limb positions
s.plt.rowLims       = [1.5 13.5]; % Plot limits
s.plt.colLims       = [3 12]; % Plot limits
s.plt.cBarFl        = 1; % Turn colour bars on
s.plt.titleFl       = 1; % Turn Title on
fS.gridXstart       = -4.5; % Settings for grid on top of image
fS.gridXstep        = 1;
fS.gridYstart       = 2.5;
fS.gridYstep        = 1;

% Find the Output Q-values and the neural activities
[Q,allNeurAct]      = CalcNetOutput(s,w,net);

% [neurAct2] = CalcNeurAct(s,net,inpAll,w); % $

% Create the image
figure;
DisplActValsFun(    s, w, Q); hold on;
xlabel(             'Stimulus x-position')
ylabel(             'Stimulus y-position')
GridOverImage(      fS,gca);
scatter(            0,12,400,'MarkerFaceColor',[1 1 1], 'MarkerEdgeColor',[0 0 0],'LineWidth',2);
axis                square;
colormap(           whitetocol(256,[0 0 0.7]));


% -------------------------------------------------------------------------
% Plot the activity of each individual neuron

figure(             'Position',[50 50 1200 600]);
s.plt.cBarFl        = 0;
s.plt.titleFl       = 0;
s.plt.plAct         = 1;
nR                  = numel(s.lp.netS);
nC                  = max(s.lp.netS);
iPl                 = 1;
for iR              = 1:nR
    for iC              = 1:nC
        subplot(            nR, nC, iPl);
        DisplActValsFun(    s, w, permute(allNeurAct(:,:,:,:,iR,iC) , [3 4 1 2]) );
        hold                on;
        scatter(            0,12,50,'o','MarkerFaceColor',[1 1 1], 'MarkerEdgeColor',[0 0 0],'LineWidth',2);
        set(                gca,'XTick',[]);
        set(                gca,'YTick',[])
        title(              ['Neur ' num2str(iC) ', Layer ' num2str(iR)]);
        iPl                 = iPl + 1;
    end
end
colormap(coltocol(  100,[0.7 0 0],[0 0 0.7]));


toc

%% FUNCTIONS

function plotPos    = MakeSubplotPos(fillSize, subSize, subSpace)
plotPos             = (1-fillSize)./2;
for iX              = 2 : length(subSize)
    plotPos             = [plotPos plotPos(end)+subSize(iX-1) + subSpace] ;
end
end

